# Generated by Grammarinator 23.7

import itertools

from math import inf
from grammarinator.runtime import *

class BasicSQLGenGenerator(Generator):


    def EOF(self, parent=None):
        pass
    EOF.min_depth = 0

    def Dollar(self, parent=None):
        with RuleContext(self, UnlexerRule(name='Dollar', parent=parent)) as current:
            UnlexerRule(src='$', parent=current)
            return current
    Dollar.min_depth = 0

    def OPEN_PAREN(self, parent=None):
        with RuleContext(self, UnlexerRule(name='OPEN_PAREN', parent=parent)) as current:
            UnlexerRule(src='(', parent=current)
            return current
    OPEN_PAREN.min_depth = 0

    def CLOSE_PAREN(self, parent=None):
        with RuleContext(self, UnlexerRule(name='CLOSE_PAREN', parent=parent)) as current:
            UnlexerRule(src=')', parent=current)
            return current
    CLOSE_PAREN.min_depth = 0

    def OPEN_BRACKET(self, parent=None):
        with RuleContext(self, UnlexerRule(name='OPEN_BRACKET', parent=parent)) as current:
            UnlexerRule(src='[', parent=current)
            return current
    OPEN_BRACKET.min_depth = 0

    def CLOSE_BRACKET(self, parent=None):
        with RuleContext(self, UnlexerRule(name='CLOSE_BRACKET', parent=parent)) as current:
            UnlexerRule(src=']', parent=current)
            return current
    CLOSE_BRACKET.min_depth = 0

    def COMMA(self, parent=None):
        with RuleContext(self, UnlexerRule(name='COMMA', parent=parent)) as current:
            UnlexerRule(src=',', parent=current)
            return current
    COMMA.min_depth = 0

    def SEMI(self, parent=None):
        with RuleContext(self, UnlexerRule(name='SEMI', parent=parent)) as current:
            UnlexerRule(src=';', parent=current)
            return current
    SEMI.min_depth = 0

    def COLON(self, parent=None):
        with RuleContext(self, UnlexerRule(name='COLON', parent=parent)) as current:
            UnlexerRule(src=':', parent=current)
            return current
    COLON.min_depth = 0

    def STAR(self, parent=None):
        with RuleContext(self, UnlexerRule(name='STAR', parent=parent)) as current:
            UnlexerRule(src='*', parent=current)
            return current
    STAR.min_depth = 0

    def EQUAL(self, parent=None):
        with RuleContext(self, UnlexerRule(name='EQUAL', parent=parent)) as current:
            UnlexerRule(src='=', parent=current)
            return current
    EQUAL.min_depth = 0

    def DOT(self, parent=None):
        with RuleContext(self, UnlexerRule(name='DOT', parent=parent)) as current:
            UnlexerRule(src='.', parent=current)
            return current
    DOT.min_depth = 0

    def PLUS(self, parent=None):
        with RuleContext(self, UnlexerRule(name='PLUS', parent=parent)) as current:
            UnlexerRule(src='+', parent=current)
            return current
    PLUS.min_depth = 0

    def MINUS(self, parent=None):
        with RuleContext(self, UnlexerRule(name='MINUS', parent=parent)) as current:
            UnlexerRule(src='-', parent=current)
            return current
    MINUS.min_depth = 0

    def SLASH(self, parent=None):
        with RuleContext(self, UnlexerRule(name='SLASH', parent=parent)) as current:
            UnlexerRule(src='/', parent=current)
            return current
    SLASH.min_depth = 0

    def CARET(self, parent=None):
        with RuleContext(self, UnlexerRule(name='CARET', parent=parent)) as current:
            UnlexerRule(src='^', parent=current)
            return current
    CARET.min_depth = 0

    def LT(self, parent=None):
        with RuleContext(self, UnlexerRule(name='LT', parent=parent)) as current:
            UnlexerRule(src='<', parent=current)
            return current
    LT.min_depth = 0

    def GT(self, parent=None):
        with RuleContext(self, UnlexerRule(name='GT', parent=parent)) as current:
            UnlexerRule(src='>', parent=current)
            return current
    GT.min_depth = 0

    def LESS_LESS(self, parent=None):
        with RuleContext(self, UnlexerRule(name='LESS_LESS', parent=parent)) as current:
            UnlexerRule(src='<<', parent=current)
            return current
    LESS_LESS.min_depth = 0

    def GREATER_GREATER(self, parent=None):
        with RuleContext(self, UnlexerRule(name='GREATER_GREATER', parent=parent)) as current:
            UnlexerRule(src='>>', parent=current)
            return current
    GREATER_GREATER.min_depth = 0

    def COLON_EQUALS(self, parent=None):
        with RuleContext(self, UnlexerRule(name='COLON_EQUALS', parent=parent)) as current:
            UnlexerRule(src=':=', parent=current)
            return current
    COLON_EQUALS.min_depth = 0

    def LESS_EQUALS(self, parent=None):
        with RuleContext(self, UnlexerRule(name='LESS_EQUALS', parent=parent)) as current:
            UnlexerRule(src='<=', parent=current)
            return current
    LESS_EQUALS.min_depth = 0

    def EQUALS_GREATER(self, parent=None):
        with RuleContext(self, UnlexerRule(name='EQUALS_GREATER', parent=parent)) as current:
            UnlexerRule(src='=>', parent=current)
            return current
    EQUALS_GREATER.min_depth = 0

    def GREATER_EQUALS(self, parent=None):
        with RuleContext(self, UnlexerRule(name='GREATER_EQUALS', parent=parent)) as current:
            UnlexerRule(src='>=', parent=current)
            return current
    GREATER_EQUALS.min_depth = 0

    def DOT_DOT(self, parent=None):
        with RuleContext(self, UnlexerRule(name='DOT_DOT', parent=parent)) as current:
            UnlexerRule(src='..', parent=current)
            return current
    DOT_DOT.min_depth = 0

    def NOT_EQUALS(self, parent=None):
        with RuleContext(self, UnlexerRule(name='NOT_EQUALS', parent=parent)) as current:
            UnlexerRule(src='<>', parent=current)
            return current
    NOT_EQUALS.min_depth = 0

    def TYPECAST(self, parent=None):
        with RuleContext(self, UnlexerRule(name='TYPECAST', parent=parent)) as current:
            UnlexerRule(src='::', parent=current)
            return current
    TYPECAST.min_depth = 0

    def PERCENT(self, parent=None):
        with RuleContext(self, UnlexerRule(name='PERCENT', parent=parent)) as current:
            UnlexerRule(src='%', parent=current)
            return current
    PERCENT.min_depth = 0

    def PARAM(self, parent=None):
        with RuleContext(self, UnlexerRule(name='PARAM', parent=parent)) as current:
            UnlexerRule(src='$', parent=current)
            if self._max_depth >= 0:
                for _ in self._model.quantify(current, 0, min=1, max=inf):
                    UnlexerRule(src=self._model.charset(current, 0, self._charsets[1]), parent=current)
            return current
    PARAM.min_depth = 0

    def Operator(self, parent=None):
        with RuleContext(self, UnlexerRule(name='Operator', parent=parent)) as current:
            with AlternationContext(self, [0, 0], [1, 1]) as weights0:
                choice0 = self._model.choice(current, 0, weights0)
                if choice0 == 0:
                    if self._max_depth >= 0:
                        for _ in self._model.quantify(current, 0, min=1, max=inf):
                            with AlternationContext(self, [1, 0, 0], [1, 1, 1]) as weights1:
                                choice1 = self._model.choice(current, 1, weights1)
                                if choice1 == 0:
                                    self.OperatorCharacter(parent=current)
                                elif choice1 == 1:
                                    if self._max_depth >= 0:
                                        for _ in self._model.quantify(current, 1, min=1, max=inf):
                                            with AlternationContext(self, [0, 0], [1, 1]) as weights2:
                                                choice2 = self._model.choice(current, 2, weights2)
                                                UnlexerRule(src=['+', '-'][choice2], parent=current)
                                    with AlternationContext(self, [1, 0], [1, 1]) as weights3:
                                        choice3 = self._model.choice(current, 3, weights3)
                                        src = [None, '/'][choice3]
                                        rule = [self.OperatorCharacter, None][choice3]
                                        if src is not None:
                                            UnlexerRule(src=src, parent=current)
                                        else:
                                            rule(parent=current)
                                elif choice1 == 2:
                                    UnlexerRule(src='/', parent=current)
                elif choice0 == 1:
                    UnlexerRule(src=self._model.charset(current, 0, self._charsets[2]), parent=current)
            return current
    Operator.min_depth = 0

    def OperatorEndingWithPlusMinus(self, parent=None):
        with RuleContext(self, UnlexerRule(name='OperatorEndingWithPlusMinus', parent=parent)) as current:
            if self._max_depth >= 0:
                for _ in self._model.quantify(current, 0, min=0, max=inf):
                    with AlternationContext(self, [1, 0, 0], [1, 1, 1]) as weights0:
                        choice0 = self._model.choice(current, 0, weights0)
                        src = [None, '-', '/'][choice0]
                        rule = [self.OperatorCharacterNotAllowPlusMinusAtEnd, None, None][choice0]
                        if src is not None:
                            UnlexerRule(src=src, parent=current)
                        else:
                            rule(parent=current)
            self.OperatorCharacterAllowPlusMinusAtEnd(parent=current)
            if self._max_depth >= 1:
                for _ in self._model.quantify(current, 1, min=0, max=1):
                    self.Operator(parent=current)
            if self._max_depth >= 0:
                for _ in self._model.quantify(current, 2, min=1, max=inf):
                    with AlternationContext(self, [0, 0], [1, 1]) as weights1:
                        choice1 = self._model.choice(current, 1, weights1)
                        UnlexerRule(src=['+', '-'][choice1], parent=current)
            return current
    OperatorEndingWithPlusMinus.min_depth = 1

    def OperatorCharacter(self, parent=None):
        with RuleContext(self, UnlexerRule(name='OperatorCharacter', parent=parent)) as current:
            UnlexerRule(src=self._model.charset(current, 0, self._charsets[3]), parent=current)
            return current
    OperatorCharacter.min_depth = 0

    def OperatorCharacterNotAllowPlusMinusAtEnd(self, parent=None):
        with RuleContext(self, UnlexerRule(name='OperatorCharacterNotAllowPlusMinusAtEnd', parent=parent)) as current:
            UnlexerRule(src=self._model.charset(current, 0, self._charsets[4]), parent=current)
            return current
    OperatorCharacterNotAllowPlusMinusAtEnd.min_depth = 0

    def OperatorCharacterAllowPlusMinusAtEnd(self, parent=None):
        with RuleContext(self, UnlexerRule(name='OperatorCharacterAllowPlusMinusAtEnd', parent=parent)) as current:
            UnlexerRule(src=self._model.charset(current, 0, self._charsets[5]), parent=current)
            return current
    OperatorCharacterAllowPlusMinusAtEnd.min_depth = 0

    def ALL(self, parent=None):
        with RuleContext(self, UnlexerRule(name='ALL', parent=parent)) as current:
            UnlexerRule(src='ALL', parent=current)
            return current
    ALL.min_depth = 0

    def ANALYSE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='ANALYSE', parent=parent)) as current:
            UnlexerRule(src='ANALYSE', parent=current)
            return current
    ANALYSE.min_depth = 0

    def ANALYZE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='ANALYZE', parent=parent)) as current:
            UnlexerRule(src='ANALYZE', parent=current)
            return current
    ANALYZE.min_depth = 0

    def AND(self, parent=None):
        with RuleContext(self, UnlexerRule(name='AND', parent=parent)) as current:
            UnlexerRule(src='AND', parent=current)
            return current
    AND.min_depth = 0

    def ANY(self, parent=None):
        with RuleContext(self, UnlexerRule(name='ANY', parent=parent)) as current:
            UnlexerRule(src='ANY', parent=current)
            return current
    ANY.min_depth = 0

    def ARRAY(self, parent=None):
        with RuleContext(self, UnlexerRule(name='ARRAY', parent=parent)) as current:
            UnlexerRule(src='ARRAY', parent=current)
            return current
    ARRAY.min_depth = 0

    def AS(self, parent=None):
        with RuleContext(self, UnlexerRule(name='AS', parent=parent)) as current:
            UnlexerRule(src='AS', parent=current)
            return current
    AS.min_depth = 0

    def ASC(self, parent=None):
        with RuleContext(self, UnlexerRule(name='ASC', parent=parent)) as current:
            UnlexerRule(src='ASC', parent=current)
            return current
    ASC.min_depth = 0

    def ASYMMETRIC(self, parent=None):
        with RuleContext(self, UnlexerRule(name='ASYMMETRIC', parent=parent)) as current:
            UnlexerRule(src='ASYMMETRIC', parent=current)
            return current
    ASYMMETRIC.min_depth = 0

    def BOTH(self, parent=None):
        with RuleContext(self, UnlexerRule(name='BOTH', parent=parent)) as current:
            UnlexerRule(src='BOTH', parent=current)
            return current
    BOTH.min_depth = 0

    def CASE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='CASE', parent=parent)) as current:
            UnlexerRule(src='CASE', parent=current)
            return current
    CASE.min_depth = 0

    def CAST(self, parent=None):
        with RuleContext(self, UnlexerRule(name='CAST', parent=parent)) as current:
            UnlexerRule(src='CAST', parent=current)
            return current
    CAST.min_depth = 0

    def CHECK(self, parent=None):
        with RuleContext(self, UnlexerRule(name='CHECK', parent=parent)) as current:
            UnlexerRule(src='CHECK', parent=current)
            return current
    CHECK.min_depth = 0

    def COLLATE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='COLLATE', parent=parent)) as current:
            UnlexerRule(src='COLLATE', parent=current)
            return current
    COLLATE.min_depth = 0

    def COLUMN(self, parent=None):
        with RuleContext(self, UnlexerRule(name='COLUMN', parent=parent)) as current:
            UnlexerRule(src='COLUMN', parent=current)
            return current
    COLUMN.min_depth = 0

    def CONSTRAINT(self, parent=None):
        with RuleContext(self, UnlexerRule(name='CONSTRAINT', parent=parent)) as current:
            UnlexerRule(src='CONSTRAINT', parent=current)
            return current
    CONSTRAINT.min_depth = 0

    def CREATE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='CREATE', parent=parent)) as current:
            UnlexerRule(src='CREATE', parent=current)
            return current
    CREATE.min_depth = 0

    def CURRENT_CATALOG(self, parent=None):
        with RuleContext(self, UnlexerRule(name='CURRENT_CATALOG', parent=parent)) as current:
            UnlexerRule(src='CURRENT_CATALOG', parent=current)
            return current
    CURRENT_CATALOG.min_depth = 0

    def CURRENT_DATE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='CURRENT_DATE', parent=parent)) as current:
            UnlexerRule(src='CURRENT_DATE', parent=current)
            return current
    CURRENT_DATE.min_depth = 0

    def CURRENT_ROLE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='CURRENT_ROLE', parent=parent)) as current:
            UnlexerRule(src='CURRENT_ROLE', parent=current)
            return current
    CURRENT_ROLE.min_depth = 0

    def CURRENT_TIME(self, parent=None):
        with RuleContext(self, UnlexerRule(name='CURRENT_TIME', parent=parent)) as current:
            UnlexerRule(src='CURRENT_TIME', parent=current)
            return current
    CURRENT_TIME.min_depth = 0

    def CURRENT_TIMESTAMP(self, parent=None):
        with RuleContext(self, UnlexerRule(name='CURRENT_TIMESTAMP', parent=parent)) as current:
            UnlexerRule(src='CURRENT_TIMESTAMP', parent=current)
            return current
    CURRENT_TIMESTAMP.min_depth = 0

    def CURRENT_USER(self, parent=None):
        with RuleContext(self, UnlexerRule(name='CURRENT_USER', parent=parent)) as current:
            UnlexerRule(src='CURRENT_USER', parent=current)
            return current
    CURRENT_USER.min_depth = 0

    def DEFAULT(self, parent=None):
        with RuleContext(self, UnlexerRule(name='DEFAULT', parent=parent)) as current:
            UnlexerRule(src='DEFAULT', parent=current)
            return current
    DEFAULT.min_depth = 0

    def DEFERRABLE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='DEFERRABLE', parent=parent)) as current:
            UnlexerRule(src='DEFERRABLE', parent=current)
            return current
    DEFERRABLE.min_depth = 0

    def DESC(self, parent=None):
        with RuleContext(self, UnlexerRule(name='DESC', parent=parent)) as current:
            UnlexerRule(src='DESC', parent=current)
            return current
    DESC.min_depth = 0

    def DISTINCT(self, parent=None):
        with RuleContext(self, UnlexerRule(name='DISTINCT', parent=parent)) as current:
            UnlexerRule(src='DISTINCT', parent=current)
            return current
    DISTINCT.min_depth = 0

    def DO(self, parent=None):
        with RuleContext(self, UnlexerRule(name='DO', parent=parent)) as current:
            UnlexerRule(src='DO', parent=current)
            return current
    DO.min_depth = 0

    def ELSE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='ELSE', parent=parent)) as current:
            UnlexerRule(src='ELSE', parent=current)
            return current
    ELSE.min_depth = 0

    def EXCEPT(self, parent=None):
        with RuleContext(self, UnlexerRule(name='EXCEPT', parent=parent)) as current:
            UnlexerRule(src='EXCEPT', parent=current)
            return current
    EXCEPT.min_depth = 0

    def FALSE_P(self, parent=None):
        with RuleContext(self, UnlexerRule(name='FALSE_P', parent=parent)) as current:
            UnlexerRule(src='FALSE', parent=current)
            return current
    FALSE_P.min_depth = 0

    def FETCH(self, parent=None):
        with RuleContext(self, UnlexerRule(name='FETCH', parent=parent)) as current:
            UnlexerRule(src='FETCH', parent=current)
            return current
    FETCH.min_depth = 0

    def FOR(self, parent=None):
        with RuleContext(self, UnlexerRule(name='FOR', parent=parent)) as current:
            UnlexerRule(src='FOR', parent=current)
            return current
    FOR.min_depth = 0

    def FOREIGN(self, parent=None):
        with RuleContext(self, UnlexerRule(name='FOREIGN', parent=parent)) as current:
            UnlexerRule(src='FOREIGN', parent=current)
            return current
    FOREIGN.min_depth = 0

    def FROM(self, parent=None):
        with RuleContext(self, UnlexerRule(name='FROM', parent=parent)) as current:
            UnlexerRule(src='FROM', parent=current)
            return current
    FROM.min_depth = 0

    def GRANT(self, parent=None):
        with RuleContext(self, UnlexerRule(name='GRANT', parent=parent)) as current:
            UnlexerRule(src='GRANT', parent=current)
            return current
    GRANT.min_depth = 0

    def GROUP_P(self, parent=None):
        with RuleContext(self, UnlexerRule(name='GROUP_P', parent=parent)) as current:
            UnlexerRule(src='GROUP', parent=current)
            return current
    GROUP_P.min_depth = 0

    def HAVING(self, parent=None):
        with RuleContext(self, UnlexerRule(name='HAVING', parent=parent)) as current:
            UnlexerRule(src='HAVING', parent=current)
            return current
    HAVING.min_depth = 0

    def IN_P(self, parent=None):
        with RuleContext(self, UnlexerRule(name='IN_P', parent=parent)) as current:
            UnlexerRule(src='IN', parent=current)
            return current
    IN_P.min_depth = 0

    def INITIALLY(self, parent=None):
        with RuleContext(self, UnlexerRule(name='INITIALLY', parent=parent)) as current:
            UnlexerRule(src='INITIALLY', parent=current)
            return current
    INITIALLY.min_depth = 0

    def INTERSECT(self, parent=None):
        with RuleContext(self, UnlexerRule(name='INTERSECT', parent=parent)) as current:
            UnlexerRule(src='INTERSECT', parent=current)
            return current
    INTERSECT.min_depth = 0

    def INTO(self, parent=None):
        with RuleContext(self, UnlexerRule(name='INTO', parent=parent)) as current:
            UnlexerRule(src='INTO', parent=current)
            return current
    INTO.min_depth = 0

    def LATERAL_P(self, parent=None):
        with RuleContext(self, UnlexerRule(name='LATERAL_P', parent=parent)) as current:
            UnlexerRule(src='LATERAL', parent=current)
            return current
    LATERAL_P.min_depth = 0

    def LEADING(self, parent=None):
        with RuleContext(self, UnlexerRule(name='LEADING', parent=parent)) as current:
            UnlexerRule(src='LEADING', parent=current)
            return current
    LEADING.min_depth = 0

    def LIMIT(self, parent=None):
        with RuleContext(self, UnlexerRule(name='LIMIT', parent=parent)) as current:
            UnlexerRule(src='LIMIT', parent=current)
            return current
    LIMIT.min_depth = 0

    def LOCALTIME(self, parent=None):
        with RuleContext(self, UnlexerRule(name='LOCALTIME', parent=parent)) as current:
            UnlexerRule(src='LOCALTIME', parent=current)
            return current
    LOCALTIME.min_depth = 0

    def LOCALTIMESTAMP(self, parent=None):
        with RuleContext(self, UnlexerRule(name='LOCALTIMESTAMP', parent=parent)) as current:
            UnlexerRule(src='LOCALTIMESTAMP', parent=current)
            return current
    LOCALTIMESTAMP.min_depth = 0

    def NOT(self, parent=None):
        with RuleContext(self, UnlexerRule(name='NOT', parent=parent)) as current:
            UnlexerRule(src='NOT', parent=current)
            return current
    NOT.min_depth = 0

    def NULL_P(self, parent=None):
        with RuleContext(self, UnlexerRule(name='NULL_P', parent=parent)) as current:
            UnlexerRule(src='NULL', parent=current)
            return current
    NULL_P.min_depth = 0

    def OFFSET(self, parent=None):
        with RuleContext(self, UnlexerRule(name='OFFSET', parent=parent)) as current:
            UnlexerRule(src='OFFSET', parent=current)
            return current
    OFFSET.min_depth = 0

    def ON(self, parent=None):
        with RuleContext(self, UnlexerRule(name='ON', parent=parent)) as current:
            UnlexerRule(src='ON', parent=current)
            return current
    ON.min_depth = 0

    def ONLY(self, parent=None):
        with RuleContext(self, UnlexerRule(name='ONLY', parent=parent)) as current:
            UnlexerRule(src='ONLY', parent=current)
            return current
    ONLY.min_depth = 0

    def OR(self, parent=None):
        with RuleContext(self, UnlexerRule(name='OR', parent=parent)) as current:
            UnlexerRule(src='OR', parent=current)
            return current
    OR.min_depth = 0

    def ORDER(self, parent=None):
        with RuleContext(self, UnlexerRule(name='ORDER', parent=parent)) as current:
            UnlexerRule(src='ORDER', parent=current)
            return current
    ORDER.min_depth = 0

    def PLACING(self, parent=None):
        with RuleContext(self, UnlexerRule(name='PLACING', parent=parent)) as current:
            UnlexerRule(src='PLACING', parent=current)
            return current
    PLACING.min_depth = 0

    def PRIMARY(self, parent=None):
        with RuleContext(self, UnlexerRule(name='PRIMARY', parent=parent)) as current:
            UnlexerRule(src='PRIMARY', parent=current)
            return current
    PRIMARY.min_depth = 0

    def REFERENCES(self, parent=None):
        with RuleContext(self, UnlexerRule(name='REFERENCES', parent=parent)) as current:
            UnlexerRule(src='REFERENCES', parent=current)
            return current
    REFERENCES.min_depth = 0

    def RETURNING(self, parent=None):
        with RuleContext(self, UnlexerRule(name='RETURNING', parent=parent)) as current:
            UnlexerRule(src='RETURNING', parent=current)
            return current
    RETURNING.min_depth = 0

    def SELECT(self, parent=None):
        with RuleContext(self, UnlexerRule(name='SELECT', parent=parent)) as current:
            UnlexerRule(src='SELECT', parent=current)
            return current
    SELECT.min_depth = 0

    def SESSION_USER(self, parent=None):
        with RuleContext(self, UnlexerRule(name='SESSION_USER', parent=parent)) as current:
            UnlexerRule(src='SESSION_USER', parent=current)
            return current
    SESSION_USER.min_depth = 0

    def SOME(self, parent=None):
        with RuleContext(self, UnlexerRule(name='SOME', parent=parent)) as current:
            UnlexerRule(src='SOME', parent=current)
            return current
    SOME.min_depth = 0

    def SYMMETRIC(self, parent=None):
        with RuleContext(self, UnlexerRule(name='SYMMETRIC', parent=parent)) as current:
            UnlexerRule(src='SYMMETRIC', parent=current)
            return current
    SYMMETRIC.min_depth = 0

    def TABLE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='TABLE', parent=parent)) as current:
            UnlexerRule(src='TABLE', parent=current)
            return current
    TABLE.min_depth = 0

    def THEN(self, parent=None):
        with RuleContext(self, UnlexerRule(name='THEN', parent=parent)) as current:
            UnlexerRule(src='THEN', parent=current)
            return current
    THEN.min_depth = 0

    def TO(self, parent=None):
        with RuleContext(self, UnlexerRule(name='TO', parent=parent)) as current:
            UnlexerRule(src='TO', parent=current)
            return current
    TO.min_depth = 0

    def TRAILING(self, parent=None):
        with RuleContext(self, UnlexerRule(name='TRAILING', parent=parent)) as current:
            UnlexerRule(src='TRAILING', parent=current)
            return current
    TRAILING.min_depth = 0

    def TRUE_P(self, parent=None):
        with RuleContext(self, UnlexerRule(name='TRUE_P', parent=parent)) as current:
            UnlexerRule(src='TRUE', parent=current)
            return current
    TRUE_P.min_depth = 0

    def UNION(self, parent=None):
        with RuleContext(self, UnlexerRule(name='UNION', parent=parent)) as current:
            UnlexerRule(src='UNION', parent=current)
            return current
    UNION.min_depth = 0

    def UNIQUE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='UNIQUE', parent=parent)) as current:
            UnlexerRule(src='UNIQUE', parent=current)
            return current
    UNIQUE.min_depth = 0

    def USER(self, parent=None):
        with RuleContext(self, UnlexerRule(name='USER', parent=parent)) as current:
            UnlexerRule(src='USER', parent=current)
            return current
    USER.min_depth = 0

    def USING(self, parent=None):
        with RuleContext(self, UnlexerRule(name='USING', parent=parent)) as current:
            UnlexerRule(src='USING', parent=current)
            return current
    USING.min_depth = 0

    def VARIADIC(self, parent=None):
        with RuleContext(self, UnlexerRule(name='VARIADIC', parent=parent)) as current:
            UnlexerRule(src='VARIADIC', parent=current)
            return current
    VARIADIC.min_depth = 0

    def WHEN(self, parent=None):
        with RuleContext(self, UnlexerRule(name='WHEN', parent=parent)) as current:
            UnlexerRule(src='WHEN', parent=current)
            return current
    WHEN.min_depth = 0

    def WHERE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='WHERE', parent=parent)) as current:
            UnlexerRule(src='WHERE', parent=current)
            return current
    WHERE.min_depth = 0

    def WINDOW(self, parent=None):
        with RuleContext(self, UnlexerRule(name='WINDOW', parent=parent)) as current:
            UnlexerRule(src='WINDOW', parent=current)
            return current
    WINDOW.min_depth = 0

    def WITH(self, parent=None):
        with RuleContext(self, UnlexerRule(name='WITH', parent=parent)) as current:
            UnlexerRule(src='WITH', parent=current)
            return current
    WITH.min_depth = 0

    def AUTHORIZATION(self, parent=None):
        with RuleContext(self, UnlexerRule(name='AUTHORIZATION', parent=parent)) as current:
            UnlexerRule(src='AUTHORIZATION', parent=current)
            return current
    AUTHORIZATION.min_depth = 0

    def BINARY(self, parent=None):
        with RuleContext(self, UnlexerRule(name='BINARY', parent=parent)) as current:
            UnlexerRule(src='BINARY', parent=current)
            return current
    BINARY.min_depth = 0

    def COLLATION(self, parent=None):
        with RuleContext(self, UnlexerRule(name='COLLATION', parent=parent)) as current:
            UnlexerRule(src='COLLATION', parent=current)
            return current
    COLLATION.min_depth = 0

    def CONCURRENTLY(self, parent=None):
        with RuleContext(self, UnlexerRule(name='CONCURRENTLY', parent=parent)) as current:
            UnlexerRule(src='CONCURRENTLY', parent=current)
            return current
    CONCURRENTLY.min_depth = 0

    def CROSS(self, parent=None):
        with RuleContext(self, UnlexerRule(name='CROSS', parent=parent)) as current:
            UnlexerRule(src='CROSS', parent=current)
            return current
    CROSS.min_depth = 0

    def CURRENT_SCHEMA(self, parent=None):
        with RuleContext(self, UnlexerRule(name='CURRENT_SCHEMA', parent=parent)) as current:
            UnlexerRule(src='CURRENT_SCHEMA', parent=current)
            return current
    CURRENT_SCHEMA.min_depth = 0

    def FREEZE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='FREEZE', parent=parent)) as current:
            UnlexerRule(src='FREEZE', parent=current)
            return current
    FREEZE.min_depth = 0

    def FULL(self, parent=None):
        with RuleContext(self, UnlexerRule(name='FULL', parent=parent)) as current:
            UnlexerRule(src='FULL', parent=current)
            return current
    FULL.min_depth = 0

    def ILIKE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='ILIKE', parent=parent)) as current:
            UnlexerRule(src='ILIKE', parent=current)
            return current
    ILIKE.min_depth = 0

    def INNER_P(self, parent=None):
        with RuleContext(self, UnlexerRule(name='INNER_P', parent=parent)) as current:
            UnlexerRule(src='INNER', parent=current)
            return current
    INNER_P.min_depth = 0

    def IS(self, parent=None):
        with RuleContext(self, UnlexerRule(name='IS', parent=parent)) as current:
            UnlexerRule(src='IS', parent=current)
            return current
    IS.min_depth = 0

    def ISNULL(self, parent=None):
        with RuleContext(self, UnlexerRule(name='ISNULL', parent=parent)) as current:
            UnlexerRule(src='ISNULL', parent=current)
            return current
    ISNULL.min_depth = 0

    def JOIN(self, parent=None):
        with RuleContext(self, UnlexerRule(name='JOIN', parent=parent)) as current:
            UnlexerRule(src='JOIN', parent=current)
            return current
    JOIN.min_depth = 0

    def LEFT(self, parent=None):
        with RuleContext(self, UnlexerRule(name='LEFT', parent=parent)) as current:
            UnlexerRule(src='LEFT', parent=current)
            return current
    LEFT.min_depth = 0

    def LIKE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='LIKE', parent=parent)) as current:
            UnlexerRule(src='LIKE', parent=current)
            return current
    LIKE.min_depth = 0

    def NATURAL(self, parent=None):
        with RuleContext(self, UnlexerRule(name='NATURAL', parent=parent)) as current:
            UnlexerRule(src='NATURAL', parent=current)
            return current
    NATURAL.min_depth = 0

    def NOTNULL(self, parent=None):
        with RuleContext(self, UnlexerRule(name='NOTNULL', parent=parent)) as current:
            UnlexerRule(src='NOTNULL', parent=current)
            return current
    NOTNULL.min_depth = 0

    def OUTER_P(self, parent=None):
        with RuleContext(self, UnlexerRule(name='OUTER_P', parent=parent)) as current:
            UnlexerRule(src='OUTER', parent=current)
            return current
    OUTER_P.min_depth = 0

    def OVER(self, parent=None):
        with RuleContext(self, UnlexerRule(name='OVER', parent=parent)) as current:
            UnlexerRule(src='OVER', parent=current)
            return current
    OVER.min_depth = 0

    def OVERLAPS(self, parent=None):
        with RuleContext(self, UnlexerRule(name='OVERLAPS', parent=parent)) as current:
            UnlexerRule(src='OVERLAPS', parent=current)
            return current
    OVERLAPS.min_depth = 0

    def RIGHT(self, parent=None):
        with RuleContext(self, UnlexerRule(name='RIGHT', parent=parent)) as current:
            UnlexerRule(src='RIGHT', parent=current)
            return current
    RIGHT.min_depth = 0

    def SIMILAR(self, parent=None):
        with RuleContext(self, UnlexerRule(name='SIMILAR', parent=parent)) as current:
            UnlexerRule(src='SIMILAR', parent=current)
            return current
    SIMILAR.min_depth = 0

    def VERBOSE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='VERBOSE', parent=parent)) as current:
            UnlexerRule(src='VERBOSE', parent=current)
            return current
    VERBOSE.min_depth = 0

    def ABORT_P(self, parent=None):
        with RuleContext(self, UnlexerRule(name='ABORT_P', parent=parent)) as current:
            UnlexerRule(src='ABORT', parent=current)
            return current
    ABORT_P.min_depth = 0

    def ABSOLUTE_P(self, parent=None):
        with RuleContext(self, UnlexerRule(name='ABSOLUTE_P', parent=parent)) as current:
            UnlexerRule(src='ABSOLUTE', parent=current)
            return current
    ABSOLUTE_P.min_depth = 0

    def ACCESS(self, parent=None):
        with RuleContext(self, UnlexerRule(name='ACCESS', parent=parent)) as current:
            UnlexerRule(src='ACCESS', parent=current)
            return current
    ACCESS.min_depth = 0

    def ACTION(self, parent=None):
        with RuleContext(self, UnlexerRule(name='ACTION', parent=parent)) as current:
            UnlexerRule(src='ACTION', parent=current)
            return current
    ACTION.min_depth = 0

    def ADD_P(self, parent=None):
        with RuleContext(self, UnlexerRule(name='ADD_P', parent=parent)) as current:
            UnlexerRule(src='ADD', parent=current)
            return current
    ADD_P.min_depth = 0

    def ADMIN(self, parent=None):
        with RuleContext(self, UnlexerRule(name='ADMIN', parent=parent)) as current:
            UnlexerRule(src='ADMIN', parent=current)
            return current
    ADMIN.min_depth = 0

    def AFTER(self, parent=None):
        with RuleContext(self, UnlexerRule(name='AFTER', parent=parent)) as current:
            UnlexerRule(src='AFTER', parent=current)
            return current
    AFTER.min_depth = 0

    def AGGREGATE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='AGGREGATE', parent=parent)) as current:
            UnlexerRule(src='AGGREGATE', parent=current)
            return current
    AGGREGATE.min_depth = 0

    def ALSO(self, parent=None):
        with RuleContext(self, UnlexerRule(name='ALSO', parent=parent)) as current:
            UnlexerRule(src='ALSO', parent=current)
            return current
    ALSO.min_depth = 0

    def ALTER(self, parent=None):
        with RuleContext(self, UnlexerRule(name='ALTER', parent=parent)) as current:
            UnlexerRule(src='ALTER', parent=current)
            return current
    ALTER.min_depth = 0

    def ALWAYS(self, parent=None):
        with RuleContext(self, UnlexerRule(name='ALWAYS', parent=parent)) as current:
            UnlexerRule(src='ALWAYS', parent=current)
            return current
    ALWAYS.min_depth = 0

    def ASSERTION(self, parent=None):
        with RuleContext(self, UnlexerRule(name='ASSERTION', parent=parent)) as current:
            UnlexerRule(src='ASSERTION', parent=current)
            return current
    ASSERTION.min_depth = 0

    def ASSIGNMENT(self, parent=None):
        with RuleContext(self, UnlexerRule(name='ASSIGNMENT', parent=parent)) as current:
            UnlexerRule(src='ASSIGNMENT', parent=current)
            return current
    ASSIGNMENT.min_depth = 0

    def AT(self, parent=None):
        with RuleContext(self, UnlexerRule(name='AT', parent=parent)) as current:
            UnlexerRule(src='AT', parent=current)
            return current
    AT.min_depth = 0

    def ATTRIBUTE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='ATTRIBUTE', parent=parent)) as current:
            UnlexerRule(src='ATTRIBUTE', parent=current)
            return current
    ATTRIBUTE.min_depth = 0

    def BACKWARD(self, parent=None):
        with RuleContext(self, UnlexerRule(name='BACKWARD', parent=parent)) as current:
            UnlexerRule(src='BACKWARD', parent=current)
            return current
    BACKWARD.min_depth = 0

    def BEFORE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='BEFORE', parent=parent)) as current:
            UnlexerRule(src='BEFORE', parent=current)
            return current
    BEFORE.min_depth = 0

    def BEGIN_P(self, parent=None):
        with RuleContext(self, UnlexerRule(name='BEGIN_P', parent=parent)) as current:
            UnlexerRule(src='BEGIN', parent=current)
            return current
    BEGIN_P.min_depth = 0

    def BY(self, parent=None):
        with RuleContext(self, UnlexerRule(name='BY', parent=parent)) as current:
            UnlexerRule(src='BY', parent=current)
            return current
    BY.min_depth = 0

    def CACHE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='CACHE', parent=parent)) as current:
            UnlexerRule(src='CACHE', parent=current)
            return current
    CACHE.min_depth = 0

    def CALLED(self, parent=None):
        with RuleContext(self, UnlexerRule(name='CALLED', parent=parent)) as current:
            UnlexerRule(src='CALLED', parent=current)
            return current
    CALLED.min_depth = 0

    def CASCADE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='CASCADE', parent=parent)) as current:
            UnlexerRule(src='CASCADE', parent=current)
            return current
    CASCADE.min_depth = 0

    def CASCADED(self, parent=None):
        with RuleContext(self, UnlexerRule(name='CASCADED', parent=parent)) as current:
            UnlexerRule(src='CASCADED', parent=current)
            return current
    CASCADED.min_depth = 0

    def CATALOG(self, parent=None):
        with RuleContext(self, UnlexerRule(name='CATALOG', parent=parent)) as current:
            UnlexerRule(src='CATALOG', parent=current)
            return current
    CATALOG.min_depth = 0

    def CHAIN(self, parent=None):
        with RuleContext(self, UnlexerRule(name='CHAIN', parent=parent)) as current:
            UnlexerRule(src='CHAIN', parent=current)
            return current
    CHAIN.min_depth = 0

    def CHARACTERISTICS(self, parent=None):
        with RuleContext(self, UnlexerRule(name='CHARACTERISTICS', parent=parent)) as current:
            UnlexerRule(src='CHARACTERISTICS', parent=current)
            return current
    CHARACTERISTICS.min_depth = 0

    def CHECKPOINT(self, parent=None):
        with RuleContext(self, UnlexerRule(name='CHECKPOINT', parent=parent)) as current:
            UnlexerRule(src='CHECKPOINT', parent=current)
            return current
    CHECKPOINT.min_depth = 0

    def CLASS(self, parent=None):
        with RuleContext(self, UnlexerRule(name='CLASS', parent=parent)) as current:
            UnlexerRule(src='CLASS', parent=current)
            return current
    CLASS.min_depth = 0

    def CLOSE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='CLOSE', parent=parent)) as current:
            UnlexerRule(src='CLOSE', parent=current)
            return current
    CLOSE.min_depth = 0

    def CLUSTER(self, parent=None):
        with RuleContext(self, UnlexerRule(name='CLUSTER', parent=parent)) as current:
            UnlexerRule(src='CLUSTER', parent=current)
            return current
    CLUSTER.min_depth = 0

    def COMMENT(self, parent=None):
        with RuleContext(self, UnlexerRule(name='COMMENT', parent=parent)) as current:
            UnlexerRule(src='COMMENT', parent=current)
            return current
    COMMENT.min_depth = 0

    def COMMENTS(self, parent=None):
        with RuleContext(self, UnlexerRule(name='COMMENTS', parent=parent)) as current:
            UnlexerRule(src='COMMENTS', parent=current)
            return current
    COMMENTS.min_depth = 0

    def COMMIT(self, parent=None):
        with RuleContext(self, UnlexerRule(name='COMMIT', parent=parent)) as current:
            UnlexerRule(src='COMMIT', parent=current)
            return current
    COMMIT.min_depth = 0

    def COMMITTED(self, parent=None):
        with RuleContext(self, UnlexerRule(name='COMMITTED', parent=parent)) as current:
            UnlexerRule(src='COMMITTED', parent=current)
            return current
    COMMITTED.min_depth = 0

    def CONFIGURATION(self, parent=None):
        with RuleContext(self, UnlexerRule(name='CONFIGURATION', parent=parent)) as current:
            UnlexerRule(src='CONFIGURATION', parent=current)
            return current
    CONFIGURATION.min_depth = 0

    def CONNECTION(self, parent=None):
        with RuleContext(self, UnlexerRule(name='CONNECTION', parent=parent)) as current:
            UnlexerRule(src='CONNECTION', parent=current)
            return current
    CONNECTION.min_depth = 0

    def CONSTRAINTS(self, parent=None):
        with RuleContext(self, UnlexerRule(name='CONSTRAINTS', parent=parent)) as current:
            UnlexerRule(src='CONSTRAINTS', parent=current)
            return current
    CONSTRAINTS.min_depth = 0

    def CONTENT_P(self, parent=None):
        with RuleContext(self, UnlexerRule(name='CONTENT_P', parent=parent)) as current:
            UnlexerRule(src='CONTENT', parent=current)
            return current
    CONTENT_P.min_depth = 0

    def CONTINUE_P(self, parent=None):
        with RuleContext(self, UnlexerRule(name='CONTINUE_P', parent=parent)) as current:
            UnlexerRule(src='CONTINUE', parent=current)
            return current
    CONTINUE_P.min_depth = 0

    def CONVERSION_P(self, parent=None):
        with RuleContext(self, UnlexerRule(name='CONVERSION_P', parent=parent)) as current:
            UnlexerRule(src='CONVERSION', parent=current)
            return current
    CONVERSION_P.min_depth = 0

    def COPY(self, parent=None):
        with RuleContext(self, UnlexerRule(name='COPY', parent=parent)) as current:
            UnlexerRule(src='COPY', parent=current)
            return current
    COPY.min_depth = 0

    def COST(self, parent=None):
        with RuleContext(self, UnlexerRule(name='COST', parent=parent)) as current:
            UnlexerRule(src='COST', parent=current)
            return current
    COST.min_depth = 0

    def CSV(self, parent=None):
        with RuleContext(self, UnlexerRule(name='CSV', parent=parent)) as current:
            UnlexerRule(src='CSV', parent=current)
            return current
    CSV.min_depth = 0

    def CURSOR(self, parent=None):
        with RuleContext(self, UnlexerRule(name='CURSOR', parent=parent)) as current:
            UnlexerRule(src='CURSOR', parent=current)
            return current
    CURSOR.min_depth = 0

    def CYCLE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='CYCLE', parent=parent)) as current:
            UnlexerRule(src='CYCLE', parent=current)
            return current
    CYCLE.min_depth = 0

    def DATA_P(self, parent=None):
        with RuleContext(self, UnlexerRule(name='DATA_P', parent=parent)) as current:
            UnlexerRule(src='DATA', parent=current)
            return current
    DATA_P.min_depth = 0

    def DATABASE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='DATABASE', parent=parent)) as current:
            UnlexerRule(src='DATABASE', parent=current)
            return current
    DATABASE.min_depth = 0

    def DAY_P(self, parent=None):
        with RuleContext(self, UnlexerRule(name='DAY_P', parent=parent)) as current:
            UnlexerRule(src='DAY', parent=current)
            return current
    DAY_P.min_depth = 0

    def DEALLOCATE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='DEALLOCATE', parent=parent)) as current:
            UnlexerRule(src='DEALLOCATE', parent=current)
            return current
    DEALLOCATE.min_depth = 0

    def DECLARE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='DECLARE', parent=parent)) as current:
            UnlexerRule(src='DECLARE', parent=current)
            return current
    DECLARE.min_depth = 0

    def DEFAULTS(self, parent=None):
        with RuleContext(self, UnlexerRule(name='DEFAULTS', parent=parent)) as current:
            UnlexerRule(src='DEFAULTS', parent=current)
            return current
    DEFAULTS.min_depth = 0

    def DEFERRED(self, parent=None):
        with RuleContext(self, UnlexerRule(name='DEFERRED', parent=parent)) as current:
            UnlexerRule(src='DEFERRED', parent=current)
            return current
    DEFERRED.min_depth = 0

    def DEFINER(self, parent=None):
        with RuleContext(self, UnlexerRule(name='DEFINER', parent=parent)) as current:
            UnlexerRule(src='DEFINER', parent=current)
            return current
    DEFINER.min_depth = 0

    def DELETE_P(self, parent=None):
        with RuleContext(self, UnlexerRule(name='DELETE_P', parent=parent)) as current:
            UnlexerRule(src='DELETE', parent=current)
            return current
    DELETE_P.min_depth = 0

    def DELIMITER(self, parent=None):
        with RuleContext(self, UnlexerRule(name='DELIMITER', parent=parent)) as current:
            UnlexerRule(src='DELIMITER', parent=current)
            return current
    DELIMITER.min_depth = 0

    def DELIMITERS(self, parent=None):
        with RuleContext(self, UnlexerRule(name='DELIMITERS', parent=parent)) as current:
            UnlexerRule(src='DELIMITERS', parent=current)
            return current
    DELIMITERS.min_depth = 0

    def DICTIONARY(self, parent=None):
        with RuleContext(self, UnlexerRule(name='DICTIONARY', parent=parent)) as current:
            UnlexerRule(src='DICTIONARY', parent=current)
            return current
    DICTIONARY.min_depth = 0

    def DISABLE_P(self, parent=None):
        with RuleContext(self, UnlexerRule(name='DISABLE_P', parent=parent)) as current:
            UnlexerRule(src='DISABLE', parent=current)
            return current
    DISABLE_P.min_depth = 0

    def DISCARD(self, parent=None):
        with RuleContext(self, UnlexerRule(name='DISCARD', parent=parent)) as current:
            UnlexerRule(src='DISCARD', parent=current)
            return current
    DISCARD.min_depth = 0

    def DOCUMENT_P(self, parent=None):
        with RuleContext(self, UnlexerRule(name='DOCUMENT_P', parent=parent)) as current:
            UnlexerRule(src='DOCUMENT', parent=current)
            return current
    DOCUMENT_P.min_depth = 0

    def DOMAIN_P(self, parent=None):
        with RuleContext(self, UnlexerRule(name='DOMAIN_P', parent=parent)) as current:
            UnlexerRule(src='DOMAIN', parent=current)
            return current
    DOMAIN_P.min_depth = 0

    def DOUBLE_P(self, parent=None):
        with RuleContext(self, UnlexerRule(name='DOUBLE_P', parent=parent)) as current:
            UnlexerRule(src='DOUBLE', parent=current)
            return current
    DOUBLE_P.min_depth = 0

    def DROP(self, parent=None):
        with RuleContext(self, UnlexerRule(name='DROP', parent=parent)) as current:
            UnlexerRule(src='DROP', parent=current)
            return current
    DROP.min_depth = 0

    def EACH(self, parent=None):
        with RuleContext(self, UnlexerRule(name='EACH', parent=parent)) as current:
            UnlexerRule(src='EACH', parent=current)
            return current
    EACH.min_depth = 0

    def ENABLE_P(self, parent=None):
        with RuleContext(self, UnlexerRule(name='ENABLE_P', parent=parent)) as current:
            UnlexerRule(src='ENABLE', parent=current)
            return current
    ENABLE_P.min_depth = 0

    def ENCODING(self, parent=None):
        with RuleContext(self, UnlexerRule(name='ENCODING', parent=parent)) as current:
            UnlexerRule(src='ENCODING', parent=current)
            return current
    ENCODING.min_depth = 0

    def ENCRYPTED(self, parent=None):
        with RuleContext(self, UnlexerRule(name='ENCRYPTED', parent=parent)) as current:
            UnlexerRule(src='ENCRYPTED', parent=current)
            return current
    ENCRYPTED.min_depth = 0

    def ENUM_P(self, parent=None):
        with RuleContext(self, UnlexerRule(name='ENUM_P', parent=parent)) as current:
            UnlexerRule(src='ENUM', parent=current)
            return current
    ENUM_P.min_depth = 0

    def ESCAPE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='ESCAPE', parent=parent)) as current:
            UnlexerRule(src='ESCAPE', parent=current)
            return current
    ESCAPE.min_depth = 0

    def EVENT(self, parent=None):
        with RuleContext(self, UnlexerRule(name='EVENT', parent=parent)) as current:
            UnlexerRule(src='EVENT', parent=current)
            return current
    EVENT.min_depth = 0

    def EXCLUDE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='EXCLUDE', parent=parent)) as current:
            UnlexerRule(src='EXCLUDE', parent=current)
            return current
    EXCLUDE.min_depth = 0

    def EXCLUDING(self, parent=None):
        with RuleContext(self, UnlexerRule(name='EXCLUDING', parent=parent)) as current:
            UnlexerRule(src='EXCLUDING', parent=current)
            return current
    EXCLUDING.min_depth = 0

    def EXCLUSIVE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='EXCLUSIVE', parent=parent)) as current:
            UnlexerRule(src='EXCLUSIVE', parent=current)
            return current
    EXCLUSIVE.min_depth = 0

    def EXECUTE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='EXECUTE', parent=parent)) as current:
            UnlexerRule(src='EXECUTE', parent=current)
            return current
    EXECUTE.min_depth = 0

    def EXPLAIN(self, parent=None):
        with RuleContext(self, UnlexerRule(name='EXPLAIN', parent=parent)) as current:
            UnlexerRule(src='EXPLAIN', parent=current)
            return current
    EXPLAIN.min_depth = 0

    def EXTENSION(self, parent=None):
        with RuleContext(self, UnlexerRule(name='EXTENSION', parent=parent)) as current:
            UnlexerRule(src='EXTENSION', parent=current)
            return current
    EXTENSION.min_depth = 0

    def EXTERNAL(self, parent=None):
        with RuleContext(self, UnlexerRule(name='EXTERNAL', parent=parent)) as current:
            UnlexerRule(src='EXTERNAL', parent=current)
            return current
    EXTERNAL.min_depth = 0

    def FAMILY(self, parent=None):
        with RuleContext(self, UnlexerRule(name='FAMILY', parent=parent)) as current:
            UnlexerRule(src='FAMILY', parent=current)
            return current
    FAMILY.min_depth = 0

    def FIRST_P(self, parent=None):
        with RuleContext(self, UnlexerRule(name='FIRST_P', parent=parent)) as current:
            UnlexerRule(src='FIRST', parent=current)
            return current
    FIRST_P.min_depth = 0

    def FOLLOWING(self, parent=None):
        with RuleContext(self, UnlexerRule(name='FOLLOWING', parent=parent)) as current:
            UnlexerRule(src='FOLLOWING', parent=current)
            return current
    FOLLOWING.min_depth = 0

    def FORCE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='FORCE', parent=parent)) as current:
            UnlexerRule(src='FORCE', parent=current)
            return current
    FORCE.min_depth = 0

    def FORWARD(self, parent=None):
        with RuleContext(self, UnlexerRule(name='FORWARD', parent=parent)) as current:
            UnlexerRule(src='FORWARD', parent=current)
            return current
    FORWARD.min_depth = 0

    def FUNCTION(self, parent=None):
        with RuleContext(self, UnlexerRule(name='FUNCTION', parent=parent)) as current:
            UnlexerRule(src='FUNCTION', parent=current)
            return current
    FUNCTION.min_depth = 0

    def FUNCTIONS(self, parent=None):
        with RuleContext(self, UnlexerRule(name='FUNCTIONS', parent=parent)) as current:
            UnlexerRule(src='FUNCTIONS', parent=current)
            return current
    FUNCTIONS.min_depth = 0

    def GLOBAL(self, parent=None):
        with RuleContext(self, UnlexerRule(name='GLOBAL', parent=parent)) as current:
            UnlexerRule(src='GLOBAL', parent=current)
            return current
    GLOBAL.min_depth = 0

    def GRANTED(self, parent=None):
        with RuleContext(self, UnlexerRule(name='GRANTED', parent=parent)) as current:
            UnlexerRule(src='GRANTED', parent=current)
            return current
    GRANTED.min_depth = 0

    def HANDLER(self, parent=None):
        with RuleContext(self, UnlexerRule(name='HANDLER', parent=parent)) as current:
            UnlexerRule(src='HANDLER', parent=current)
            return current
    HANDLER.min_depth = 0

    def HEADER_P(self, parent=None):
        with RuleContext(self, UnlexerRule(name='HEADER_P', parent=parent)) as current:
            UnlexerRule(src='HEADER', parent=current)
            return current
    HEADER_P.min_depth = 0

    def HOLD(self, parent=None):
        with RuleContext(self, UnlexerRule(name='HOLD', parent=parent)) as current:
            UnlexerRule(src='HOLD', parent=current)
            return current
    HOLD.min_depth = 0

    def HOUR_P(self, parent=None):
        with RuleContext(self, UnlexerRule(name='HOUR_P', parent=parent)) as current:
            UnlexerRule(src='HOUR', parent=current)
            return current
    HOUR_P.min_depth = 0

    def IDENTITY_P(self, parent=None):
        with RuleContext(self, UnlexerRule(name='IDENTITY_P', parent=parent)) as current:
            UnlexerRule(src='IDENTITY', parent=current)
            return current
    IDENTITY_P.min_depth = 0

    def IF_P(self, parent=None):
        with RuleContext(self, UnlexerRule(name='IF_P', parent=parent)) as current:
            UnlexerRule(src='IF', parent=current)
            return current
    IF_P.min_depth = 0

    def IMMEDIATE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='IMMEDIATE', parent=parent)) as current:
            UnlexerRule(src='IMMEDIATE', parent=current)
            return current
    IMMEDIATE.min_depth = 0

    def IMMUTABLE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='IMMUTABLE', parent=parent)) as current:
            UnlexerRule(src='IMMUTABLE', parent=current)
            return current
    IMMUTABLE.min_depth = 0

    def IMPLICIT_P(self, parent=None):
        with RuleContext(self, UnlexerRule(name='IMPLICIT_P', parent=parent)) as current:
            UnlexerRule(src='IMPLICIT', parent=current)
            return current
    IMPLICIT_P.min_depth = 0

    def INCLUDING(self, parent=None):
        with RuleContext(self, UnlexerRule(name='INCLUDING', parent=parent)) as current:
            UnlexerRule(src='INCLUDING', parent=current)
            return current
    INCLUDING.min_depth = 0

    def INCREMENT(self, parent=None):
        with RuleContext(self, UnlexerRule(name='INCREMENT', parent=parent)) as current:
            UnlexerRule(src='INCREMENT', parent=current)
            return current
    INCREMENT.min_depth = 0

    def INDEX(self, parent=None):
        with RuleContext(self, UnlexerRule(name='INDEX', parent=parent)) as current:
            UnlexerRule(src='INDEX', parent=current)
            return current
    INDEX.min_depth = 0

    def INDEXES(self, parent=None):
        with RuleContext(self, UnlexerRule(name='INDEXES', parent=parent)) as current:
            UnlexerRule(src='INDEXES', parent=current)
            return current
    INDEXES.min_depth = 0

    def INHERIT(self, parent=None):
        with RuleContext(self, UnlexerRule(name='INHERIT', parent=parent)) as current:
            UnlexerRule(src='INHERIT', parent=current)
            return current
    INHERIT.min_depth = 0

    def INHERITS(self, parent=None):
        with RuleContext(self, UnlexerRule(name='INHERITS', parent=parent)) as current:
            UnlexerRule(src='INHERITS', parent=current)
            return current
    INHERITS.min_depth = 0

    def INLINE_P(self, parent=None):
        with RuleContext(self, UnlexerRule(name='INLINE_P', parent=parent)) as current:
            UnlexerRule(src='INLINE', parent=current)
            return current
    INLINE_P.min_depth = 0

    def INSENSITIVE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='INSENSITIVE', parent=parent)) as current:
            UnlexerRule(src='INSENSITIVE', parent=current)
            return current
    INSENSITIVE.min_depth = 0

    def INSERT(self, parent=None):
        with RuleContext(self, UnlexerRule(name='INSERT', parent=parent)) as current:
            UnlexerRule(src='INSERT', parent=current)
            return current
    INSERT.min_depth = 0

    def INSTEAD(self, parent=None):
        with RuleContext(self, UnlexerRule(name='INSTEAD', parent=parent)) as current:
            UnlexerRule(src='INSTEAD', parent=current)
            return current
    INSTEAD.min_depth = 0

    def INVOKER(self, parent=None):
        with RuleContext(self, UnlexerRule(name='INVOKER', parent=parent)) as current:
            UnlexerRule(src='INVOKER', parent=current)
            return current
    INVOKER.min_depth = 0

    def ISOLATION(self, parent=None):
        with RuleContext(self, UnlexerRule(name='ISOLATION', parent=parent)) as current:
            UnlexerRule(src='ISOLATION', parent=current)
            return current
    ISOLATION.min_depth = 0

    def KEY(self, parent=None):
        with RuleContext(self, UnlexerRule(name='KEY', parent=parent)) as current:
            UnlexerRule(src='KEY', parent=current)
            return current
    KEY.min_depth = 0

    def LABEL(self, parent=None):
        with RuleContext(self, UnlexerRule(name='LABEL', parent=parent)) as current:
            UnlexerRule(src='LABEL', parent=current)
            return current
    LABEL.min_depth = 0

    def LANGUAGE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='LANGUAGE', parent=parent)) as current:
            UnlexerRule(src='LANGUAGE', parent=current)
            return current
    LANGUAGE.min_depth = 0

    def LARGE_P(self, parent=None):
        with RuleContext(self, UnlexerRule(name='LARGE_P', parent=parent)) as current:
            UnlexerRule(src='LARGE', parent=current)
            return current
    LARGE_P.min_depth = 0

    def LAST_P(self, parent=None):
        with RuleContext(self, UnlexerRule(name='LAST_P', parent=parent)) as current:
            UnlexerRule(src='LAST', parent=current)
            return current
    LAST_P.min_depth = 0

    def LEAKPROOF(self, parent=None):
        with RuleContext(self, UnlexerRule(name='LEAKPROOF', parent=parent)) as current:
            UnlexerRule(src='LEAKPROOF', parent=current)
            return current
    LEAKPROOF.min_depth = 0

    def LEVEL(self, parent=None):
        with RuleContext(self, UnlexerRule(name='LEVEL', parent=parent)) as current:
            UnlexerRule(src='LEVEL', parent=current)
            return current
    LEVEL.min_depth = 0

    def LISTEN(self, parent=None):
        with RuleContext(self, UnlexerRule(name='LISTEN', parent=parent)) as current:
            UnlexerRule(src='LISTEN', parent=current)
            return current
    LISTEN.min_depth = 0

    def LOAD(self, parent=None):
        with RuleContext(self, UnlexerRule(name='LOAD', parent=parent)) as current:
            UnlexerRule(src='LOAD', parent=current)
            return current
    LOAD.min_depth = 0

    def LOCAL(self, parent=None):
        with RuleContext(self, UnlexerRule(name='LOCAL', parent=parent)) as current:
            UnlexerRule(src='LOCAL', parent=current)
            return current
    LOCAL.min_depth = 0

    def LOCATION(self, parent=None):
        with RuleContext(self, UnlexerRule(name='LOCATION', parent=parent)) as current:
            UnlexerRule(src='LOCATION', parent=current)
            return current
    LOCATION.min_depth = 0

    def LOCK_P(self, parent=None):
        with RuleContext(self, UnlexerRule(name='LOCK_P', parent=parent)) as current:
            UnlexerRule(src='LOCK', parent=current)
            return current
    LOCK_P.min_depth = 0

    def MAPPING(self, parent=None):
        with RuleContext(self, UnlexerRule(name='MAPPING', parent=parent)) as current:
            UnlexerRule(src='MAPPING', parent=current)
            return current
    MAPPING.min_depth = 0

    def MATCH(self, parent=None):
        with RuleContext(self, UnlexerRule(name='MATCH', parent=parent)) as current:
            UnlexerRule(src='MATCH', parent=current)
            return current
    MATCH.min_depth = 0

    def MATCHED(self, parent=None):
        with RuleContext(self, UnlexerRule(name='MATCHED', parent=parent)) as current:
            UnlexerRule(src='MATCHED', parent=current)
            return current
    MATCHED.min_depth = 0

    def MATERIALIZED(self, parent=None):
        with RuleContext(self, UnlexerRule(name='MATERIALIZED', parent=parent)) as current:
            UnlexerRule(src='MATERIALIZED', parent=current)
            return current
    MATERIALIZED.min_depth = 0

    def MAXVALUE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='MAXVALUE', parent=parent)) as current:
            UnlexerRule(src='MAXVALUE', parent=current)
            return current
    MAXVALUE.min_depth = 0

    def MERGE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='MERGE', parent=parent)) as current:
            UnlexerRule(src='MERGE', parent=current)
            return current
    MERGE.min_depth = 0

    def MINUTE_P(self, parent=None):
        with RuleContext(self, UnlexerRule(name='MINUTE_P', parent=parent)) as current:
            UnlexerRule(src='MINUTE', parent=current)
            return current
    MINUTE_P.min_depth = 0

    def MINVALUE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='MINVALUE', parent=parent)) as current:
            UnlexerRule(src='MINVALUE', parent=current)
            return current
    MINVALUE.min_depth = 0

    def MODE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='MODE', parent=parent)) as current:
            UnlexerRule(src='MODE', parent=current)
            return current
    MODE.min_depth = 0

    def MONTH_P(self, parent=None):
        with RuleContext(self, UnlexerRule(name='MONTH_P', parent=parent)) as current:
            UnlexerRule(src='MONTH', parent=current)
            return current
    MONTH_P.min_depth = 0

    def MOVE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='MOVE', parent=parent)) as current:
            UnlexerRule(src='MOVE', parent=current)
            return current
    MOVE.min_depth = 0

    def NEXT(self, parent=None):
        with RuleContext(self, UnlexerRule(name='NEXT', parent=parent)) as current:
            UnlexerRule(src='NEXT', parent=current)
            return current
    NEXT.min_depth = 0

    def NO(self, parent=None):
        with RuleContext(self, UnlexerRule(name='NO', parent=parent)) as current:
            UnlexerRule(src='NO', parent=current)
            return current
    NO.min_depth = 0

    def NOTHING(self, parent=None):
        with RuleContext(self, UnlexerRule(name='NOTHING', parent=parent)) as current:
            UnlexerRule(src='NOTHING', parent=current)
            return current
    NOTHING.min_depth = 0

    def NOTIFY(self, parent=None):
        with RuleContext(self, UnlexerRule(name='NOTIFY', parent=parent)) as current:
            UnlexerRule(src='NOTIFY', parent=current)
            return current
    NOTIFY.min_depth = 0

    def NOWAIT(self, parent=None):
        with RuleContext(self, UnlexerRule(name='NOWAIT', parent=parent)) as current:
            UnlexerRule(src='NOWAIT', parent=current)
            return current
    NOWAIT.min_depth = 0

    def NULLS_P(self, parent=None):
        with RuleContext(self, UnlexerRule(name='NULLS_P', parent=parent)) as current:
            UnlexerRule(src='NULLS', parent=current)
            return current
    NULLS_P.min_depth = 0

    def OBJECT_P(self, parent=None):
        with RuleContext(self, UnlexerRule(name='OBJECT_P', parent=parent)) as current:
            UnlexerRule(src='OBJECT', parent=current)
            return current
    OBJECT_P.min_depth = 0

    def OF(self, parent=None):
        with RuleContext(self, UnlexerRule(name='OF', parent=parent)) as current:
            UnlexerRule(src='OF', parent=current)
            return current
    OF.min_depth = 0

    def OFF(self, parent=None):
        with RuleContext(self, UnlexerRule(name='OFF', parent=parent)) as current:
            UnlexerRule(src='OFF', parent=current)
            return current
    OFF.min_depth = 0

    def OIDS(self, parent=None):
        with RuleContext(self, UnlexerRule(name='OIDS', parent=parent)) as current:
            UnlexerRule(src='OIDS', parent=current)
            return current
    OIDS.min_depth = 0

    def OPERATOR(self, parent=None):
        with RuleContext(self, UnlexerRule(name='OPERATOR', parent=parent)) as current:
            UnlexerRule(src='OPERATOR', parent=current)
            return current
    OPERATOR.min_depth = 0

    def OPTION(self, parent=None):
        with RuleContext(self, UnlexerRule(name='OPTION', parent=parent)) as current:
            UnlexerRule(src='OPTION', parent=current)
            return current
    OPTION.min_depth = 0

    def OPTIONS(self, parent=None):
        with RuleContext(self, UnlexerRule(name='OPTIONS', parent=parent)) as current:
            UnlexerRule(src='OPTIONS', parent=current)
            return current
    OPTIONS.min_depth = 0

    def OWNED(self, parent=None):
        with RuleContext(self, UnlexerRule(name='OWNED', parent=parent)) as current:
            UnlexerRule(src='OWNED', parent=current)
            return current
    OWNED.min_depth = 0

    def OWNER(self, parent=None):
        with RuleContext(self, UnlexerRule(name='OWNER', parent=parent)) as current:
            UnlexerRule(src='OWNER', parent=current)
            return current
    OWNER.min_depth = 0

    def PARSER(self, parent=None):
        with RuleContext(self, UnlexerRule(name='PARSER', parent=parent)) as current:
            UnlexerRule(src='PARSER', parent=current)
            return current
    PARSER.min_depth = 0

    def PARTIAL(self, parent=None):
        with RuleContext(self, UnlexerRule(name='PARTIAL', parent=parent)) as current:
            UnlexerRule(src='PARTIAL', parent=current)
            return current
    PARTIAL.min_depth = 0

    def PARTITION(self, parent=None):
        with RuleContext(self, UnlexerRule(name='PARTITION', parent=parent)) as current:
            UnlexerRule(src='PARTITION', parent=current)
            return current
    PARTITION.min_depth = 0

    def PASSING(self, parent=None):
        with RuleContext(self, UnlexerRule(name='PASSING', parent=parent)) as current:
            UnlexerRule(src='PASSING', parent=current)
            return current
    PASSING.min_depth = 0

    def PASSWORD(self, parent=None):
        with RuleContext(self, UnlexerRule(name='PASSWORD', parent=parent)) as current:
            UnlexerRule(src='PASSWORD', parent=current)
            return current
    PASSWORD.min_depth = 0

    def PLANS(self, parent=None):
        with RuleContext(self, UnlexerRule(name='PLANS', parent=parent)) as current:
            UnlexerRule(src='PLANS', parent=current)
            return current
    PLANS.min_depth = 0

    def PRECEDING(self, parent=None):
        with RuleContext(self, UnlexerRule(name='PRECEDING', parent=parent)) as current:
            UnlexerRule(src='PRECEDING', parent=current)
            return current
    PRECEDING.min_depth = 0

    def PREPARE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='PREPARE', parent=parent)) as current:
            UnlexerRule(src='PREPARE', parent=current)
            return current
    PREPARE.min_depth = 0

    def PREPARED(self, parent=None):
        with RuleContext(self, UnlexerRule(name='PREPARED', parent=parent)) as current:
            UnlexerRule(src='PREPARED', parent=current)
            return current
    PREPARED.min_depth = 0

    def PRESERVE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='PRESERVE', parent=parent)) as current:
            UnlexerRule(src='PRESERVE', parent=current)
            return current
    PRESERVE.min_depth = 0

    def PRIOR(self, parent=None):
        with RuleContext(self, UnlexerRule(name='PRIOR', parent=parent)) as current:
            UnlexerRule(src='PRIOR', parent=current)
            return current
    PRIOR.min_depth = 0

    def PRIVILEGES(self, parent=None):
        with RuleContext(self, UnlexerRule(name='PRIVILEGES', parent=parent)) as current:
            UnlexerRule(src='PRIVILEGES', parent=current)
            return current
    PRIVILEGES.min_depth = 0

    def PROCEDURAL(self, parent=None):
        with RuleContext(self, UnlexerRule(name='PROCEDURAL', parent=parent)) as current:
            UnlexerRule(src='PROCEDURAL', parent=current)
            return current
    PROCEDURAL.min_depth = 0

    def PROCEDURE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='PROCEDURE', parent=parent)) as current:
            UnlexerRule(src='PROCEDURE', parent=current)
            return current
    PROCEDURE.min_depth = 0

    def PROGRAM(self, parent=None):
        with RuleContext(self, UnlexerRule(name='PROGRAM', parent=parent)) as current:
            UnlexerRule(src='PROGRAM', parent=current)
            return current
    PROGRAM.min_depth = 0

    def QUOTE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='QUOTE', parent=parent)) as current:
            UnlexerRule(src='QUOTE', parent=current)
            return current
    QUOTE.min_depth = 0

    def RANGE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='RANGE', parent=parent)) as current:
            UnlexerRule(src='RANGE', parent=current)
            return current
    RANGE.min_depth = 0

    def READ(self, parent=None):
        with RuleContext(self, UnlexerRule(name='READ', parent=parent)) as current:
            UnlexerRule(src='READ', parent=current)
            return current
    READ.min_depth = 0

    def REASSIGN(self, parent=None):
        with RuleContext(self, UnlexerRule(name='REASSIGN', parent=parent)) as current:
            UnlexerRule(src='REASSIGN', parent=current)
            return current
    REASSIGN.min_depth = 0

    def RECHECK(self, parent=None):
        with RuleContext(self, UnlexerRule(name='RECHECK', parent=parent)) as current:
            UnlexerRule(src='RECHECK', parent=current)
            return current
    RECHECK.min_depth = 0

    def RECURSIVE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='RECURSIVE', parent=parent)) as current:
            UnlexerRule(src='RECURSIVE', parent=current)
            return current
    RECURSIVE.min_depth = 0

    def REF(self, parent=None):
        with RuleContext(self, UnlexerRule(name='REF', parent=parent)) as current:
            UnlexerRule(src='REF', parent=current)
            return current
    REF.min_depth = 0

    def REFRESH(self, parent=None):
        with RuleContext(self, UnlexerRule(name='REFRESH', parent=parent)) as current:
            UnlexerRule(src='REFRESH', parent=current)
            return current
    REFRESH.min_depth = 0

    def REINDEX(self, parent=None):
        with RuleContext(self, UnlexerRule(name='REINDEX', parent=parent)) as current:
            UnlexerRule(src='REINDEX', parent=current)
            return current
    REINDEX.min_depth = 0

    def RELATIVE_P(self, parent=None):
        with RuleContext(self, UnlexerRule(name='RELATIVE_P', parent=parent)) as current:
            UnlexerRule(src='RELATIVE', parent=current)
            return current
    RELATIVE_P.min_depth = 0

    def RELEASE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='RELEASE', parent=parent)) as current:
            UnlexerRule(src='RELEASE', parent=current)
            return current
    RELEASE.min_depth = 0

    def RENAME(self, parent=None):
        with RuleContext(self, UnlexerRule(name='RENAME', parent=parent)) as current:
            UnlexerRule(src='RENAME', parent=current)
            return current
    RENAME.min_depth = 0

    def REPEATABLE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='REPEATABLE', parent=parent)) as current:
            UnlexerRule(src='REPEATABLE', parent=current)
            return current
    REPEATABLE.min_depth = 0

    def REPLACE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='REPLACE', parent=parent)) as current:
            UnlexerRule(src='REPLACE', parent=current)
            return current
    REPLACE.min_depth = 0

    def REPLICA(self, parent=None):
        with RuleContext(self, UnlexerRule(name='REPLICA', parent=parent)) as current:
            UnlexerRule(src='REPLICA', parent=current)
            return current
    REPLICA.min_depth = 0

    def RESET(self, parent=None):
        with RuleContext(self, UnlexerRule(name='RESET', parent=parent)) as current:
            UnlexerRule(src='RESET', parent=current)
            return current
    RESET.min_depth = 0

    def RESTART(self, parent=None):
        with RuleContext(self, UnlexerRule(name='RESTART', parent=parent)) as current:
            UnlexerRule(src='RESTART', parent=current)
            return current
    RESTART.min_depth = 0

    def RESTRICT(self, parent=None):
        with RuleContext(self, UnlexerRule(name='RESTRICT', parent=parent)) as current:
            UnlexerRule(src='RESTRICT', parent=current)
            return current
    RESTRICT.min_depth = 0

    def RETURNS(self, parent=None):
        with RuleContext(self, UnlexerRule(name='RETURNS', parent=parent)) as current:
            UnlexerRule(src='RETURNS', parent=current)
            return current
    RETURNS.min_depth = 0

    def REVOKE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='REVOKE', parent=parent)) as current:
            UnlexerRule(src='REVOKE', parent=current)
            return current
    REVOKE.min_depth = 0

    def ROLE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='ROLE', parent=parent)) as current:
            UnlexerRule(src='ROLE', parent=current)
            return current
    ROLE.min_depth = 0

    def ROLLBACK(self, parent=None):
        with RuleContext(self, UnlexerRule(name='ROLLBACK', parent=parent)) as current:
            UnlexerRule(src='ROLLBACK', parent=current)
            return current
    ROLLBACK.min_depth = 0

    def ROWS(self, parent=None):
        with RuleContext(self, UnlexerRule(name='ROWS', parent=parent)) as current:
            UnlexerRule(src='ROWS', parent=current)
            return current
    ROWS.min_depth = 0

    def RULE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='RULE', parent=parent)) as current:
            UnlexerRule(src='RULE', parent=current)
            return current
    RULE.min_depth = 0

    def SAVEPOINT(self, parent=None):
        with RuleContext(self, UnlexerRule(name='SAVEPOINT', parent=parent)) as current:
            UnlexerRule(src='SAVEPOINT', parent=current)
            return current
    SAVEPOINT.min_depth = 0

    def SCHEMA(self, parent=None):
        with RuleContext(self, UnlexerRule(name='SCHEMA', parent=parent)) as current:
            UnlexerRule(src='SCHEMA', parent=current)
            return current
    SCHEMA.min_depth = 0

    def SCROLL(self, parent=None):
        with RuleContext(self, UnlexerRule(name='SCROLL', parent=parent)) as current:
            UnlexerRule(src='SCROLL', parent=current)
            return current
    SCROLL.min_depth = 0

    def SEARCH(self, parent=None):
        with RuleContext(self, UnlexerRule(name='SEARCH', parent=parent)) as current:
            UnlexerRule(src='SEARCH', parent=current)
            return current
    SEARCH.min_depth = 0

    def SECOND_P(self, parent=None):
        with RuleContext(self, UnlexerRule(name='SECOND_P', parent=parent)) as current:
            UnlexerRule(src='SECOND', parent=current)
            return current
    SECOND_P.min_depth = 0

    def SECURITY(self, parent=None):
        with RuleContext(self, UnlexerRule(name='SECURITY', parent=parent)) as current:
            UnlexerRule(src='SECURITY', parent=current)
            return current
    SECURITY.min_depth = 0

    def SEQUENCE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='SEQUENCE', parent=parent)) as current:
            UnlexerRule(src='SEQUENCE', parent=current)
            return current
    SEQUENCE.min_depth = 0

    def SEQUENCES(self, parent=None):
        with RuleContext(self, UnlexerRule(name='SEQUENCES', parent=parent)) as current:
            UnlexerRule(src='SEQUENCES', parent=current)
            return current
    SEQUENCES.min_depth = 0

    def SERIALIZABLE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='SERIALIZABLE', parent=parent)) as current:
            UnlexerRule(src='SERIALIZABLE', parent=current)
            return current
    SERIALIZABLE.min_depth = 0

    def SERVER(self, parent=None):
        with RuleContext(self, UnlexerRule(name='SERVER', parent=parent)) as current:
            UnlexerRule(src='SERVER', parent=current)
            return current
    SERVER.min_depth = 0

    def SESSION(self, parent=None):
        with RuleContext(self, UnlexerRule(name='SESSION', parent=parent)) as current:
            UnlexerRule(src='SESSION', parent=current)
            return current
    SESSION.min_depth = 0

    def SET(self, parent=None):
        with RuleContext(self, UnlexerRule(name='SET', parent=parent)) as current:
            UnlexerRule(src='SET', parent=current)
            return current
    SET.min_depth = 0

    def SHARE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='SHARE', parent=parent)) as current:
            UnlexerRule(src='SHARE', parent=current)
            return current
    SHARE.min_depth = 0

    def SHOW(self, parent=None):
        with RuleContext(self, UnlexerRule(name='SHOW', parent=parent)) as current:
            UnlexerRule(src='SHOW', parent=current)
            return current
    SHOW.min_depth = 0

    def SIMPLE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='SIMPLE', parent=parent)) as current:
            UnlexerRule(src='SIMPLE', parent=current)
            return current
    SIMPLE.min_depth = 0

    def SNAPSHOT(self, parent=None):
        with RuleContext(self, UnlexerRule(name='SNAPSHOT', parent=parent)) as current:
            UnlexerRule(src='SNAPSHOT', parent=current)
            return current
    SNAPSHOT.min_depth = 0

    def STABLE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='STABLE', parent=parent)) as current:
            UnlexerRule(src='STABLE', parent=current)
            return current
    STABLE.min_depth = 0

    def STANDALONE_P(self, parent=None):
        with RuleContext(self, UnlexerRule(name='STANDALONE_P', parent=parent)) as current:
            UnlexerRule(src='STANDALONE', parent=current)
            return current
    STANDALONE_P.min_depth = 0

    def START(self, parent=None):
        with RuleContext(self, UnlexerRule(name='START', parent=parent)) as current:
            UnlexerRule(src='START', parent=current)
            return current
    START.min_depth = 0

    def STATEMENT(self, parent=None):
        with RuleContext(self, UnlexerRule(name='STATEMENT', parent=parent)) as current:
            UnlexerRule(src='STATEMENT', parent=current)
            return current
    STATEMENT.min_depth = 0

    def STATISTICS(self, parent=None):
        with RuleContext(self, UnlexerRule(name='STATISTICS', parent=parent)) as current:
            UnlexerRule(src='STATISTICS', parent=current)
            return current
    STATISTICS.min_depth = 0

    def STDIN(self, parent=None):
        with RuleContext(self, UnlexerRule(name='STDIN', parent=parent)) as current:
            UnlexerRule(src='STDIN', parent=current)
            return current
    STDIN.min_depth = 0

    def STDOUT(self, parent=None):
        with RuleContext(self, UnlexerRule(name='STDOUT', parent=parent)) as current:
            UnlexerRule(src='STDOUT', parent=current)
            return current
    STDOUT.min_depth = 0

    def STORAGE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='STORAGE', parent=parent)) as current:
            UnlexerRule(src='STORAGE', parent=current)
            return current
    STORAGE.min_depth = 0

    def STRICT_P(self, parent=None):
        with RuleContext(self, UnlexerRule(name='STRICT_P', parent=parent)) as current:
            UnlexerRule(src='STRICT', parent=current)
            return current
    STRICT_P.min_depth = 0

    def STRIP_P(self, parent=None):
        with RuleContext(self, UnlexerRule(name='STRIP_P', parent=parent)) as current:
            UnlexerRule(src='STRIP', parent=current)
            return current
    STRIP_P.min_depth = 0

    def SYSID(self, parent=None):
        with RuleContext(self, UnlexerRule(name='SYSID', parent=parent)) as current:
            UnlexerRule(src='SYSID', parent=current)
            return current
    SYSID.min_depth = 0

    def SYSTEM_P(self, parent=None):
        with RuleContext(self, UnlexerRule(name='SYSTEM_P', parent=parent)) as current:
            UnlexerRule(src='SYSTEM', parent=current)
            return current
    SYSTEM_P.min_depth = 0

    def TABLES(self, parent=None):
        with RuleContext(self, UnlexerRule(name='TABLES', parent=parent)) as current:
            UnlexerRule(src='TABLES', parent=current)
            return current
    TABLES.min_depth = 0

    def TABLESPACE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='TABLESPACE', parent=parent)) as current:
            UnlexerRule(src='TABLESPACE', parent=current)
            return current
    TABLESPACE.min_depth = 0

    def TEMP(self, parent=None):
        with RuleContext(self, UnlexerRule(name='TEMP', parent=parent)) as current:
            UnlexerRule(src='TEMP', parent=current)
            return current
    TEMP.min_depth = 0

    def TEMPLATE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='TEMPLATE', parent=parent)) as current:
            UnlexerRule(src='TEMPLATE', parent=current)
            return current
    TEMPLATE.min_depth = 0

    def TEMPORARY(self, parent=None):
        with RuleContext(self, UnlexerRule(name='TEMPORARY', parent=parent)) as current:
            UnlexerRule(src='TEMPORARY', parent=current)
            return current
    TEMPORARY.min_depth = 0

    def TEXT_P(self, parent=None):
        with RuleContext(self, UnlexerRule(name='TEXT_P', parent=parent)) as current:
            UnlexerRule(src='TEXT', parent=current)
            return current
    TEXT_P.min_depth = 0

    def TRANSACTION(self, parent=None):
        with RuleContext(self, UnlexerRule(name='TRANSACTION', parent=parent)) as current:
            UnlexerRule(src='TRANSACTION', parent=current)
            return current
    TRANSACTION.min_depth = 0

    def TRIGGER(self, parent=None):
        with RuleContext(self, UnlexerRule(name='TRIGGER', parent=parent)) as current:
            UnlexerRule(src='TRIGGER', parent=current)
            return current
    TRIGGER.min_depth = 0

    def TRUNCATE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='TRUNCATE', parent=parent)) as current:
            UnlexerRule(src='TRUNCATE', parent=current)
            return current
    TRUNCATE.min_depth = 0

    def TRUSTED(self, parent=None):
        with RuleContext(self, UnlexerRule(name='TRUSTED', parent=parent)) as current:
            UnlexerRule(src='TRUSTED', parent=current)
            return current
    TRUSTED.min_depth = 0

    def TYPE_P(self, parent=None):
        with RuleContext(self, UnlexerRule(name='TYPE_P', parent=parent)) as current:
            UnlexerRule(src='TYPE', parent=current)
            return current
    TYPE_P.min_depth = 0

    def TYPES_P(self, parent=None):
        with RuleContext(self, UnlexerRule(name='TYPES_P', parent=parent)) as current:
            UnlexerRule(src='TYPES', parent=current)
            return current
    TYPES_P.min_depth = 0

    def UNBOUNDED(self, parent=None):
        with RuleContext(self, UnlexerRule(name='UNBOUNDED', parent=parent)) as current:
            UnlexerRule(src='UNBOUNDED', parent=current)
            return current
    UNBOUNDED.min_depth = 0

    def UNCOMMITTED(self, parent=None):
        with RuleContext(self, UnlexerRule(name='UNCOMMITTED', parent=parent)) as current:
            UnlexerRule(src='UNCOMMITTED', parent=current)
            return current
    UNCOMMITTED.min_depth = 0

    def UNENCRYPTED(self, parent=None):
        with RuleContext(self, UnlexerRule(name='UNENCRYPTED', parent=parent)) as current:
            UnlexerRule(src='UNENCRYPTED', parent=current)
            return current
    UNENCRYPTED.min_depth = 0

    def UNKNOWN(self, parent=None):
        with RuleContext(self, UnlexerRule(name='UNKNOWN', parent=parent)) as current:
            UnlexerRule(src='UNKNOWN', parent=current)
            return current
    UNKNOWN.min_depth = 0

    def UNLISTEN(self, parent=None):
        with RuleContext(self, UnlexerRule(name='UNLISTEN', parent=parent)) as current:
            UnlexerRule(src='UNLISTEN', parent=current)
            return current
    UNLISTEN.min_depth = 0

    def UNLOGGED(self, parent=None):
        with RuleContext(self, UnlexerRule(name='UNLOGGED', parent=parent)) as current:
            UnlexerRule(src='UNLOGGED', parent=current)
            return current
    UNLOGGED.min_depth = 0

    def UNTIL(self, parent=None):
        with RuleContext(self, UnlexerRule(name='UNTIL', parent=parent)) as current:
            UnlexerRule(src='UNTIL', parent=current)
            return current
    UNTIL.min_depth = 0

    def UPDATE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='UPDATE', parent=parent)) as current:
            UnlexerRule(src='UPDATE', parent=current)
            return current
    UPDATE.min_depth = 0

    def VACUUM(self, parent=None):
        with RuleContext(self, UnlexerRule(name='VACUUM', parent=parent)) as current:
            UnlexerRule(src='VACUUM', parent=current)
            return current
    VACUUM.min_depth = 0

    def VALID(self, parent=None):
        with RuleContext(self, UnlexerRule(name='VALID', parent=parent)) as current:
            UnlexerRule(src='VALID', parent=current)
            return current
    VALID.min_depth = 0

    def VALIDATE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='VALIDATE', parent=parent)) as current:
            UnlexerRule(src='VALIDATE', parent=current)
            return current
    VALIDATE.min_depth = 0

    def VALIDATOR(self, parent=None):
        with RuleContext(self, UnlexerRule(name='VALIDATOR', parent=parent)) as current:
            UnlexerRule(src='VALIDATOR', parent=current)
            return current
    VALIDATOR.min_depth = 0

    def VARYING(self, parent=None):
        with RuleContext(self, UnlexerRule(name='VARYING', parent=parent)) as current:
            UnlexerRule(src='VARYING', parent=current)
            return current
    VARYING.min_depth = 0

    def VERSION_P(self, parent=None):
        with RuleContext(self, UnlexerRule(name='VERSION_P', parent=parent)) as current:
            UnlexerRule(src='VERSION', parent=current)
            return current
    VERSION_P.min_depth = 0

    def VIEW(self, parent=None):
        with RuleContext(self, UnlexerRule(name='VIEW', parent=parent)) as current:
            UnlexerRule(src='VIEW', parent=current)
            return current
    VIEW.min_depth = 0

    def VOLATILE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='VOLATILE', parent=parent)) as current:
            UnlexerRule(src='VOLATILE', parent=current)
            return current
    VOLATILE.min_depth = 0

    def WHITESPACE_P(self, parent=None):
        with RuleContext(self, UnlexerRule(name='WHITESPACE_P', parent=parent)) as current:
            UnlexerRule(src='WHITESPACE', parent=current)
            return current
    WHITESPACE_P.min_depth = 0

    def WITHOUT(self, parent=None):
        with RuleContext(self, UnlexerRule(name='WITHOUT', parent=parent)) as current:
            UnlexerRule(src='WITHOUT', parent=current)
            return current
    WITHOUT.min_depth = 0

    def WORK(self, parent=None):
        with RuleContext(self, UnlexerRule(name='WORK', parent=parent)) as current:
            UnlexerRule(src='WORK', parent=current)
            return current
    WORK.min_depth = 0

    def WRAPPER(self, parent=None):
        with RuleContext(self, UnlexerRule(name='WRAPPER', parent=parent)) as current:
            UnlexerRule(src='WRAPPER', parent=current)
            return current
    WRAPPER.min_depth = 0

    def WRITE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='WRITE', parent=parent)) as current:
            UnlexerRule(src='WRITE', parent=current)
            return current
    WRITE.min_depth = 0

    def XML_P(self, parent=None):
        with RuleContext(self, UnlexerRule(name='XML_P', parent=parent)) as current:
            UnlexerRule(src='XML', parent=current)
            return current
    XML_P.min_depth = 0

    def YEAR_P(self, parent=None):
        with RuleContext(self, UnlexerRule(name='YEAR_P', parent=parent)) as current:
            UnlexerRule(src='YEAR', parent=current)
            return current
    YEAR_P.min_depth = 0

    def YES_P(self, parent=None):
        with RuleContext(self, UnlexerRule(name='YES_P', parent=parent)) as current:
            UnlexerRule(src='YES', parent=current)
            return current
    YES_P.min_depth = 0

    def ZONE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='ZONE', parent=parent)) as current:
            UnlexerRule(src='ZONE', parent=current)
            return current
    ZONE.min_depth = 0

    def BETWEEN(self, parent=None):
        with RuleContext(self, UnlexerRule(name='BETWEEN', parent=parent)) as current:
            UnlexerRule(src='BETWEEN', parent=current)
            return current
    BETWEEN.min_depth = 0

    def BIGINT(self, parent=None):
        with RuleContext(self, UnlexerRule(name='BIGINT', parent=parent)) as current:
            UnlexerRule(src='BIGINT', parent=current)
            return current
    BIGINT.min_depth = 0

    def BIT(self, parent=None):
        with RuleContext(self, UnlexerRule(name='BIT', parent=parent)) as current:
            UnlexerRule(src='BIT', parent=current)
            return current
    BIT.min_depth = 0

    def BOOLEAN_P(self, parent=None):
        with RuleContext(self, UnlexerRule(name='BOOLEAN_P', parent=parent)) as current:
            UnlexerRule(src='BOOLEAN', parent=current)
            return current
    BOOLEAN_P.min_depth = 0

    def CHAR_P(self, parent=None):
        with RuleContext(self, UnlexerRule(name='CHAR_P', parent=parent)) as current:
            UnlexerRule(src='CHAR', parent=current)
            return current
    CHAR_P.min_depth = 0

    def CHARACTER(self, parent=None):
        with RuleContext(self, UnlexerRule(name='CHARACTER', parent=parent)) as current:
            UnlexerRule(src='CHARACTER', parent=current)
            return current
    CHARACTER.min_depth = 0

    def COALESCE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='COALESCE', parent=parent)) as current:
            UnlexerRule(src='COALESCE', parent=current)
            return current
    COALESCE.min_depth = 0

    def DEC(self, parent=None):
        with RuleContext(self, UnlexerRule(name='DEC', parent=parent)) as current:
            UnlexerRule(src='DEC', parent=current)
            return current
    DEC.min_depth = 0

    def DECIMAL_P(self, parent=None):
        with RuleContext(self, UnlexerRule(name='DECIMAL_P', parent=parent)) as current:
            UnlexerRule(src='DECIMAL', parent=current)
            return current
    DECIMAL_P.min_depth = 0

    def EXISTS(self, parent=None):
        with RuleContext(self, UnlexerRule(name='EXISTS', parent=parent)) as current:
            UnlexerRule(src='EXISTS', parent=current)
            return current
    EXISTS.min_depth = 0

    def EXTRACT(self, parent=None):
        with RuleContext(self, UnlexerRule(name='EXTRACT', parent=parent)) as current:
            UnlexerRule(src='EXTRACT', parent=current)
            return current
    EXTRACT.min_depth = 0

    def FLOAT_P(self, parent=None):
        with RuleContext(self, UnlexerRule(name='FLOAT_P', parent=parent)) as current:
            UnlexerRule(src='FLOAT', parent=current)
            return current
    FLOAT_P.min_depth = 0

    def GREATEST(self, parent=None):
        with RuleContext(self, UnlexerRule(name='GREATEST', parent=parent)) as current:
            UnlexerRule(src='GREATEST', parent=current)
            return current
    GREATEST.min_depth = 0

    def INOUT(self, parent=None):
        with RuleContext(self, UnlexerRule(name='INOUT', parent=parent)) as current:
            UnlexerRule(src='INOUT', parent=current)
            return current
    INOUT.min_depth = 0

    def INT_P(self, parent=None):
        with RuleContext(self, UnlexerRule(name='INT_P', parent=parent)) as current:
            UnlexerRule(src='INT', parent=current)
            return current
    INT_P.min_depth = 0

    def INTEGER(self, parent=None):
        with RuleContext(self, UnlexerRule(name='INTEGER', parent=parent)) as current:
            UnlexerRule(src='INTEGER', parent=current)
            return current
    INTEGER.min_depth = 0

    def INTERVAL(self, parent=None):
        with RuleContext(self, UnlexerRule(name='INTERVAL', parent=parent)) as current:
            UnlexerRule(src='INTERVAL', parent=current)
            return current
    INTERVAL.min_depth = 0

    def LEAST(self, parent=None):
        with RuleContext(self, UnlexerRule(name='LEAST', parent=parent)) as current:
            UnlexerRule(src='LEAST', parent=current)
            return current
    LEAST.min_depth = 0

    def NATIONAL(self, parent=None):
        with RuleContext(self, UnlexerRule(name='NATIONAL', parent=parent)) as current:
            UnlexerRule(src='NATIONAL', parent=current)
            return current
    NATIONAL.min_depth = 0

    def NCHAR(self, parent=None):
        with RuleContext(self, UnlexerRule(name='NCHAR', parent=parent)) as current:
            UnlexerRule(src='NCHAR', parent=current)
            return current
    NCHAR.min_depth = 0

    def NONE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='NONE', parent=parent)) as current:
            UnlexerRule(src='NONE', parent=current)
            return current
    NONE.min_depth = 0

    def NULLIF(self, parent=None):
        with RuleContext(self, UnlexerRule(name='NULLIF', parent=parent)) as current:
            UnlexerRule(src='NULLIF', parent=current)
            return current
    NULLIF.min_depth = 0

    def NUMERIC(self, parent=None):
        with RuleContext(self, UnlexerRule(name='NUMERIC', parent=parent)) as current:
            UnlexerRule(src='NUMERIC', parent=current)
            return current
    NUMERIC.min_depth = 0

    def OVERLAY(self, parent=None):
        with RuleContext(self, UnlexerRule(name='OVERLAY', parent=parent)) as current:
            UnlexerRule(src='OVERLAY', parent=current)
            return current
    OVERLAY.min_depth = 0

    def POSITION(self, parent=None):
        with RuleContext(self, UnlexerRule(name='POSITION', parent=parent)) as current:
            UnlexerRule(src='POSITION', parent=current)
            return current
    POSITION.min_depth = 0

    def PRECISION(self, parent=None):
        with RuleContext(self, UnlexerRule(name='PRECISION', parent=parent)) as current:
            UnlexerRule(src='PRECISION', parent=current)
            return current
    PRECISION.min_depth = 0

    def REAL(self, parent=None):
        with RuleContext(self, UnlexerRule(name='REAL', parent=parent)) as current:
            UnlexerRule(src='REAL', parent=current)
            return current
    REAL.min_depth = 0

    def ROW(self, parent=None):
        with RuleContext(self, UnlexerRule(name='ROW', parent=parent)) as current:
            UnlexerRule(src='ROW', parent=current)
            return current
    ROW.min_depth = 0

    def SETOF(self, parent=None):
        with RuleContext(self, UnlexerRule(name='SETOF', parent=parent)) as current:
            UnlexerRule(src='SETOF', parent=current)
            return current
    SETOF.min_depth = 0

    def SMALLINT(self, parent=None):
        with RuleContext(self, UnlexerRule(name='SMALLINT', parent=parent)) as current:
            UnlexerRule(src='SMALLINT', parent=current)
            return current
    SMALLINT.min_depth = 0

    def SUBSTRING(self, parent=None):
        with RuleContext(self, UnlexerRule(name='SUBSTRING', parent=parent)) as current:
            UnlexerRule(src='SUBSTRING', parent=current)
            return current
    SUBSTRING.min_depth = 0

    def TIME(self, parent=None):
        with RuleContext(self, UnlexerRule(name='TIME', parent=parent)) as current:
            UnlexerRule(src='TIME', parent=current)
            return current
    TIME.min_depth = 0

    def TIMESTAMP(self, parent=None):
        with RuleContext(self, UnlexerRule(name='TIMESTAMP', parent=parent)) as current:
            UnlexerRule(src='TIMESTAMP', parent=current)
            return current
    TIMESTAMP.min_depth = 0

    def TREAT(self, parent=None):
        with RuleContext(self, UnlexerRule(name='TREAT', parent=parent)) as current:
            UnlexerRule(src='TREAT', parent=current)
            return current
    TREAT.min_depth = 0

    def TRIM(self, parent=None):
        with RuleContext(self, UnlexerRule(name='TRIM', parent=parent)) as current:
            UnlexerRule(src='TRIM', parent=current)
            return current
    TRIM.min_depth = 0

    def VALUES(self, parent=None):
        with RuleContext(self, UnlexerRule(name='VALUES', parent=parent)) as current:
            UnlexerRule(src='VALUES', parent=current)
            return current
    VALUES.min_depth = 0

    def VARCHAR(self, parent=None):
        with RuleContext(self, UnlexerRule(name='VARCHAR', parent=parent)) as current:
            UnlexerRule(src='VARCHAR', parent=current)
            return current
    VARCHAR.min_depth = 0

    def XMLATTRIBUTES(self, parent=None):
        with RuleContext(self, UnlexerRule(name='XMLATTRIBUTES', parent=parent)) as current:
            UnlexerRule(src='XMLATTRIBUTES', parent=current)
            return current
    XMLATTRIBUTES.min_depth = 0

    def XMLCOMMENT(self, parent=None):
        with RuleContext(self, UnlexerRule(name='XMLCOMMENT', parent=parent)) as current:
            UnlexerRule(src='XMLCOMMENT', parent=current)
            return current
    XMLCOMMENT.min_depth = 0

    def XMLAGG(self, parent=None):
        with RuleContext(self, UnlexerRule(name='XMLAGG', parent=parent)) as current:
            UnlexerRule(src='XMLAGG', parent=current)
            return current
    XMLAGG.min_depth = 0

    def XML_IS_WELL_FORMED(self, parent=None):
        with RuleContext(self, UnlexerRule(name='XML_IS_WELL_FORMED', parent=parent)) as current:
            UnlexerRule(src='XML_IS_WELL_FORMED', parent=current)
            return current
    XML_IS_WELL_FORMED.min_depth = 0

    def XML_IS_WELL_FORMED_DOCUMENT(self, parent=None):
        with RuleContext(self, UnlexerRule(name='XML_IS_WELL_FORMED_DOCUMENT', parent=parent)) as current:
            UnlexerRule(src='XML_IS_WELL_FORMED_DOCUMENT', parent=current)
            return current
    XML_IS_WELL_FORMED_DOCUMENT.min_depth = 0

    def XML_IS_WELL_FORMED_CONTENT(self, parent=None):
        with RuleContext(self, UnlexerRule(name='XML_IS_WELL_FORMED_CONTENT', parent=parent)) as current:
            UnlexerRule(src='XML_IS_WELL_FORMED_CONTENT', parent=current)
            return current
    XML_IS_WELL_FORMED_CONTENT.min_depth = 0

    def XPATH(self, parent=None):
        with RuleContext(self, UnlexerRule(name='XPATH', parent=parent)) as current:
            UnlexerRule(src='XPATH', parent=current)
            return current
    XPATH.min_depth = 0

    def XPATH_EXISTS(self, parent=None):
        with RuleContext(self, UnlexerRule(name='XPATH_EXISTS', parent=parent)) as current:
            UnlexerRule(src='XPATH_EXISTS', parent=current)
            return current
    XPATH_EXISTS.min_depth = 0

    def XMLCONCAT(self, parent=None):
        with RuleContext(self, UnlexerRule(name='XMLCONCAT', parent=parent)) as current:
            UnlexerRule(src='XMLCONCAT', parent=current)
            return current
    XMLCONCAT.min_depth = 0

    def XMLELEMENT(self, parent=None):
        with RuleContext(self, UnlexerRule(name='XMLELEMENT', parent=parent)) as current:
            UnlexerRule(src='XMLELEMENT', parent=current)
            return current
    XMLELEMENT.min_depth = 0

    def XMLEXISTS(self, parent=None):
        with RuleContext(self, UnlexerRule(name='XMLEXISTS', parent=parent)) as current:
            UnlexerRule(src='XMLEXISTS', parent=current)
            return current
    XMLEXISTS.min_depth = 0

    def XMLFOREST(self, parent=None):
        with RuleContext(self, UnlexerRule(name='XMLFOREST', parent=parent)) as current:
            UnlexerRule(src='XMLFOREST', parent=current)
            return current
    XMLFOREST.min_depth = 0

    def XMLPARSE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='XMLPARSE', parent=parent)) as current:
            UnlexerRule(src='XMLPARSE', parent=current)
            return current
    XMLPARSE.min_depth = 0

    def XMLPI(self, parent=None):
        with RuleContext(self, UnlexerRule(name='XMLPI', parent=parent)) as current:
            UnlexerRule(src='XMLPI', parent=current)
            return current
    XMLPI.min_depth = 0

    def XMLROOT(self, parent=None):
        with RuleContext(self, UnlexerRule(name='XMLROOT', parent=parent)) as current:
            UnlexerRule(src='XMLROOT', parent=current)
            return current
    XMLROOT.min_depth = 0

    def XMLSERIALIZE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='XMLSERIALIZE', parent=parent)) as current:
            UnlexerRule(src='XMLSERIALIZE', parent=current)
            return current
    XMLSERIALIZE.min_depth = 0

    def CALL(self, parent=None):
        with RuleContext(self, UnlexerRule(name='CALL', parent=parent)) as current:
            UnlexerRule(src='CALL', parent=current)
            return current
    CALL.min_depth = 0

    def CURRENT_P(self, parent=None):
        with RuleContext(self, UnlexerRule(name='CURRENT_P', parent=parent)) as current:
            UnlexerRule(src='CURRENT', parent=current)
            return current
    CURRENT_P.min_depth = 0

    def ATTACH(self, parent=None):
        with RuleContext(self, UnlexerRule(name='ATTACH', parent=parent)) as current:
            UnlexerRule(src='ATTACH', parent=current)
            return current
    ATTACH.min_depth = 0

    def DETACH(self, parent=None):
        with RuleContext(self, UnlexerRule(name='DETACH', parent=parent)) as current:
            UnlexerRule(src='DETACH', parent=current)
            return current
    DETACH.min_depth = 0

    def EXPRESSION(self, parent=None):
        with RuleContext(self, UnlexerRule(name='EXPRESSION', parent=parent)) as current:
            UnlexerRule(src='EXPRESSION', parent=current)
            return current
    EXPRESSION.min_depth = 0

    def GENERATED(self, parent=None):
        with RuleContext(self, UnlexerRule(name='GENERATED', parent=parent)) as current:
            UnlexerRule(src='GENERATED', parent=current)
            return current
    GENERATED.min_depth = 0

    def LOGGED(self, parent=None):
        with RuleContext(self, UnlexerRule(name='LOGGED', parent=parent)) as current:
            UnlexerRule(src='LOGGED', parent=current)
            return current
    LOGGED.min_depth = 0

    def STORED(self, parent=None):
        with RuleContext(self, UnlexerRule(name='STORED', parent=parent)) as current:
            UnlexerRule(src='STORED', parent=current)
            return current
    STORED.min_depth = 0

    def INCLUDE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='INCLUDE', parent=parent)) as current:
            UnlexerRule(src='INCLUDE', parent=current)
            return current
    INCLUDE.min_depth = 0

    def ROUTINE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='ROUTINE', parent=parent)) as current:
            UnlexerRule(src='ROUTINE', parent=current)
            return current
    ROUTINE.min_depth = 0

    def TRANSFORM(self, parent=None):
        with RuleContext(self, UnlexerRule(name='TRANSFORM', parent=parent)) as current:
            UnlexerRule(src='TRANSFORM', parent=current)
            return current
    TRANSFORM.min_depth = 0

    def IMPORT_P(self, parent=None):
        with RuleContext(self, UnlexerRule(name='IMPORT_P', parent=parent)) as current:
            UnlexerRule(src='IMPORT', parent=current)
            return current
    IMPORT_P.min_depth = 0

    def POLICY(self, parent=None):
        with RuleContext(self, UnlexerRule(name='POLICY', parent=parent)) as current:
            UnlexerRule(src='POLICY', parent=current)
            return current
    POLICY.min_depth = 0

    def METHOD(self, parent=None):
        with RuleContext(self, UnlexerRule(name='METHOD', parent=parent)) as current:
            UnlexerRule(src='METHOD', parent=current)
            return current
    METHOD.min_depth = 0

    def REFERENCING(self, parent=None):
        with RuleContext(self, UnlexerRule(name='REFERENCING', parent=parent)) as current:
            UnlexerRule(src='REFERENCING', parent=current)
            return current
    REFERENCING.min_depth = 0

    def NEW(self, parent=None):
        with RuleContext(self, UnlexerRule(name='NEW', parent=parent)) as current:
            UnlexerRule(src='NEW', parent=current)
            return current
    NEW.min_depth = 0

    def OLD(self, parent=None):
        with RuleContext(self, UnlexerRule(name='OLD', parent=parent)) as current:
            UnlexerRule(src='OLD', parent=current)
            return current
    OLD.min_depth = 0

    def VALUE_P(self, parent=None):
        with RuleContext(self, UnlexerRule(name='VALUE_P', parent=parent)) as current:
            UnlexerRule(src='VALUE', parent=current)
            return current
    VALUE_P.min_depth = 0

    def SUBSCRIPTION(self, parent=None):
        with RuleContext(self, UnlexerRule(name='SUBSCRIPTION', parent=parent)) as current:
            UnlexerRule(src='SUBSCRIPTION', parent=current)
            return current
    SUBSCRIPTION.min_depth = 0

    def PUBLICATION(self, parent=None):
        with RuleContext(self, UnlexerRule(name='PUBLICATION', parent=parent)) as current:
            UnlexerRule(src='PUBLICATION', parent=current)
            return current
    PUBLICATION.min_depth = 0

    def OUT_P(self, parent=None):
        with RuleContext(self, UnlexerRule(name='OUT_P', parent=parent)) as current:
            UnlexerRule(src='OUT', parent=current)
            return current
    OUT_P.min_depth = 0

    def END_P(self, parent=None):
        with RuleContext(self, UnlexerRule(name='END_P', parent=parent)) as current:
            UnlexerRule(src='END', parent=current)
            return current
    END_P.min_depth = 0

    def ROUTINES(self, parent=None):
        with RuleContext(self, UnlexerRule(name='ROUTINES', parent=parent)) as current:
            UnlexerRule(src='ROUTINES', parent=current)
            return current
    ROUTINES.min_depth = 0

    def SCHEMAS(self, parent=None):
        with RuleContext(self, UnlexerRule(name='SCHEMAS', parent=parent)) as current:
            UnlexerRule(src='SCHEMAS', parent=current)
            return current
    SCHEMAS.min_depth = 0

    def PROCEDURES(self, parent=None):
        with RuleContext(self, UnlexerRule(name='PROCEDURES', parent=parent)) as current:
            UnlexerRule(src='PROCEDURES', parent=current)
            return current
    PROCEDURES.min_depth = 0

    def INPUT_P(self, parent=None):
        with RuleContext(self, UnlexerRule(name='INPUT_P', parent=parent)) as current:
            UnlexerRule(src='INPUT', parent=current)
            return current
    INPUT_P.min_depth = 0

    def SUPPORT(self, parent=None):
        with RuleContext(self, UnlexerRule(name='SUPPORT', parent=parent)) as current:
            UnlexerRule(src='SUPPORT', parent=current)
            return current
    SUPPORT.min_depth = 0

    def PARALLEL(self, parent=None):
        with RuleContext(self, UnlexerRule(name='PARALLEL', parent=parent)) as current:
            UnlexerRule(src='PARALLEL', parent=current)
            return current
    PARALLEL.min_depth = 0

    def SQL_P(self, parent=None):
        with RuleContext(self, UnlexerRule(name='SQL_P', parent=parent)) as current:
            UnlexerRule(src='SQL', parent=current)
            return current
    SQL_P.min_depth = 0

    def DEPENDS(self, parent=None):
        with RuleContext(self, UnlexerRule(name='DEPENDS', parent=parent)) as current:
            UnlexerRule(src='DEPENDS', parent=current)
            return current
    DEPENDS.min_depth = 0

    def OVERRIDING(self, parent=None):
        with RuleContext(self, UnlexerRule(name='OVERRIDING', parent=parent)) as current:
            UnlexerRule(src='OVERRIDING', parent=current)
            return current
    OVERRIDING.min_depth = 0

    def CONFLICT(self, parent=None):
        with RuleContext(self, UnlexerRule(name='CONFLICT', parent=parent)) as current:
            UnlexerRule(src='CONFLICT', parent=current)
            return current
    CONFLICT.min_depth = 0

    def SKIP_P(self, parent=None):
        with RuleContext(self, UnlexerRule(name='SKIP_P', parent=parent)) as current:
            UnlexerRule(src='SKIP', parent=current)
            return current
    SKIP_P.min_depth = 0

    def LOCKED(self, parent=None):
        with RuleContext(self, UnlexerRule(name='LOCKED', parent=parent)) as current:
            UnlexerRule(src='LOCKED', parent=current)
            return current
    LOCKED.min_depth = 0

    def TIES(self, parent=None):
        with RuleContext(self, UnlexerRule(name='TIES', parent=parent)) as current:
            UnlexerRule(src='TIES', parent=current)
            return current
    TIES.min_depth = 0

    def ROLLUP(self, parent=None):
        with RuleContext(self, UnlexerRule(name='ROLLUP', parent=parent)) as current:
            UnlexerRule(src='ROLLUP', parent=current)
            return current
    ROLLUP.min_depth = 0

    def CUBE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='CUBE', parent=parent)) as current:
            UnlexerRule(src='CUBE', parent=current)
            return current
    CUBE.min_depth = 0

    def GROUPING(self, parent=None):
        with RuleContext(self, UnlexerRule(name='GROUPING', parent=parent)) as current:
            UnlexerRule(src='GROUPING', parent=current)
            return current
    GROUPING.min_depth = 0

    def SETS(self, parent=None):
        with RuleContext(self, UnlexerRule(name='SETS', parent=parent)) as current:
            UnlexerRule(src='SETS', parent=current)
            return current
    SETS.min_depth = 0

    def TABLESAMPLE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='TABLESAMPLE', parent=parent)) as current:
            UnlexerRule(src='TABLESAMPLE', parent=current)
            return current
    TABLESAMPLE.min_depth = 0

    def ORDINALITY(self, parent=None):
        with RuleContext(self, UnlexerRule(name='ORDINALITY', parent=parent)) as current:
            UnlexerRule(src='ORDINALITY', parent=current)
            return current
    ORDINALITY.min_depth = 0

    def XMLTABLE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='XMLTABLE', parent=parent)) as current:
            UnlexerRule(src='XMLTABLE', parent=current)
            return current
    XMLTABLE.min_depth = 0

    def COLUMNS(self, parent=None):
        with RuleContext(self, UnlexerRule(name='COLUMNS', parent=parent)) as current:
            UnlexerRule(src='COLUMNS', parent=current)
            return current
    COLUMNS.min_depth = 0

    def XMLNAMESPACES(self, parent=None):
        with RuleContext(self, UnlexerRule(name='XMLNAMESPACES', parent=parent)) as current:
            UnlexerRule(src='XMLNAMESPACES', parent=current)
            return current
    XMLNAMESPACES.min_depth = 0

    def ROWTYPE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='ROWTYPE', parent=parent)) as current:
            UnlexerRule(src='ROWTYPE', parent=current)
            return current
    ROWTYPE.min_depth = 0

    def NORMALIZED(self, parent=None):
        with RuleContext(self, UnlexerRule(name='NORMALIZED', parent=parent)) as current:
            UnlexerRule(src='NORMALIZED', parent=current)
            return current
    NORMALIZED.min_depth = 0

    def WITHIN(self, parent=None):
        with RuleContext(self, UnlexerRule(name='WITHIN', parent=parent)) as current:
            UnlexerRule(src='WITHIN', parent=current)
            return current
    WITHIN.min_depth = 0

    def FILTER(self, parent=None):
        with RuleContext(self, UnlexerRule(name='FILTER', parent=parent)) as current:
            UnlexerRule(src='FILTER', parent=current)
            return current
    FILTER.min_depth = 0

    def GROUPS(self, parent=None):
        with RuleContext(self, UnlexerRule(name='GROUPS', parent=parent)) as current:
            UnlexerRule(src='GROUPS', parent=current)
            return current
    GROUPS.min_depth = 0

    def OTHERS(self, parent=None):
        with RuleContext(self, UnlexerRule(name='OTHERS', parent=parent)) as current:
            UnlexerRule(src='OTHERS', parent=current)
            return current
    OTHERS.min_depth = 0

    def NFC(self, parent=None):
        with RuleContext(self, UnlexerRule(name='NFC', parent=parent)) as current:
            UnlexerRule(src='NFC', parent=current)
            return current
    NFC.min_depth = 0

    def NFD(self, parent=None):
        with RuleContext(self, UnlexerRule(name='NFD', parent=parent)) as current:
            UnlexerRule(src='NFD', parent=current)
            return current
    NFD.min_depth = 0

    def NFKC(self, parent=None):
        with RuleContext(self, UnlexerRule(name='NFKC', parent=parent)) as current:
            UnlexerRule(src='NFKC', parent=current)
            return current
    NFKC.min_depth = 0

    def NFKD(self, parent=None):
        with RuleContext(self, UnlexerRule(name='NFKD', parent=parent)) as current:
            UnlexerRule(src='NFKD', parent=current)
            return current
    NFKD.min_depth = 0

    def UESCAPE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='UESCAPE', parent=parent)) as current:
            UnlexerRule(src='UESCAPE', parent=current)
            return current
    UESCAPE.min_depth = 0

    def VIEWS(self, parent=None):
        with RuleContext(self, UnlexerRule(name='VIEWS', parent=parent)) as current:
            UnlexerRule(src='VIEWS', parent=current)
            return current
    VIEWS.min_depth = 0

    def NORMALIZE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='NORMALIZE', parent=parent)) as current:
            UnlexerRule(src='NORMALIZE', parent=current)
            return current
    NORMALIZE.min_depth = 0

    def DUMP(self, parent=None):
        with RuleContext(self, UnlexerRule(name='DUMP', parent=parent)) as current:
            UnlexerRule(src='DUMP', parent=current)
            return current
    DUMP.min_depth = 0

    def PRINT_STRICT_PARAMS(self, parent=None):
        with RuleContext(self, UnlexerRule(name='PRINT_STRICT_PARAMS', parent=parent)) as current:
            UnlexerRule(src='PRINT_STRICT_PARAMS', parent=current)
            return current
    PRINT_STRICT_PARAMS.min_depth = 0

    def VARIABLE_CONFLICT(self, parent=None):
        with RuleContext(self, UnlexerRule(name='VARIABLE_CONFLICT', parent=parent)) as current:
            UnlexerRule(src='VARIABLE_CONFLICT', parent=current)
            return current
    VARIABLE_CONFLICT.min_depth = 0

    def ERROR(self, parent=None):
        with RuleContext(self, UnlexerRule(name='ERROR', parent=parent)) as current:
            UnlexerRule(src='ERROR', parent=current)
            return current
    ERROR.min_depth = 0

    def USE_VARIABLE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='USE_VARIABLE', parent=parent)) as current:
            UnlexerRule(src='USE_VARIABLE', parent=current)
            return current
    USE_VARIABLE.min_depth = 0

    def USE_COLUMN(self, parent=None):
        with RuleContext(self, UnlexerRule(name='USE_COLUMN', parent=parent)) as current:
            UnlexerRule(src='USE_COLUMN', parent=current)
            return current
    USE_COLUMN.min_depth = 0

    def ALIAS(self, parent=None):
        with RuleContext(self, UnlexerRule(name='ALIAS', parent=parent)) as current:
            UnlexerRule(src='ALIAS', parent=current)
            return current
    ALIAS.min_depth = 0

    def CONSTANT(self, parent=None):
        with RuleContext(self, UnlexerRule(name='CONSTANT', parent=parent)) as current:
            UnlexerRule(src='CONSTANT', parent=current)
            return current
    CONSTANT.min_depth = 0

    def PERFORM(self, parent=None):
        with RuleContext(self, UnlexerRule(name='PERFORM', parent=parent)) as current:
            UnlexerRule(src='PERFORM', parent=current)
            return current
    PERFORM.min_depth = 0

    def GET(self, parent=None):
        with RuleContext(self, UnlexerRule(name='GET', parent=parent)) as current:
            UnlexerRule(src='GET', parent=current)
            return current
    GET.min_depth = 0

    def DIAGNOSTICS(self, parent=None):
        with RuleContext(self, UnlexerRule(name='DIAGNOSTICS', parent=parent)) as current:
            UnlexerRule(src='DIAGNOSTICS', parent=current)
            return current
    DIAGNOSTICS.min_depth = 0

    def STACKED(self, parent=None):
        with RuleContext(self, UnlexerRule(name='STACKED', parent=parent)) as current:
            UnlexerRule(src='STACKED', parent=current)
            return current
    STACKED.min_depth = 0

    def ELSIF(self, parent=None):
        with RuleContext(self, UnlexerRule(name='ELSIF', parent=parent)) as current:
            UnlexerRule(src='ELSIF', parent=current)
            return current
    ELSIF.min_depth = 0

    def WHILE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='WHILE', parent=parent)) as current:
            UnlexerRule(src='WHILE', parent=current)
            return current
    WHILE.min_depth = 0

    def REVERSE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='REVERSE', parent=parent)) as current:
            UnlexerRule(src='REVERSE', parent=current)
            return current
    REVERSE.min_depth = 0

    def FOREACH(self, parent=None):
        with RuleContext(self, UnlexerRule(name='FOREACH', parent=parent)) as current:
            UnlexerRule(src='FOREACH', parent=current)
            return current
    FOREACH.min_depth = 0

    def SLICE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='SLICE', parent=parent)) as current:
            UnlexerRule(src='SLICE', parent=current)
            return current
    SLICE.min_depth = 0

    def EXIT(self, parent=None):
        with RuleContext(self, UnlexerRule(name='EXIT', parent=parent)) as current:
            UnlexerRule(src='EXIT', parent=current)
            return current
    EXIT.min_depth = 0

    def RETURN(self, parent=None):
        with RuleContext(self, UnlexerRule(name='RETURN', parent=parent)) as current:
            UnlexerRule(src='RETURN', parent=current)
            return current
    RETURN.min_depth = 0

    def QUERY(self, parent=None):
        with RuleContext(self, UnlexerRule(name='QUERY', parent=parent)) as current:
            UnlexerRule(src='QUERY', parent=current)
            return current
    QUERY.min_depth = 0

    def RAISE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='RAISE', parent=parent)) as current:
            UnlexerRule(src='RAISE', parent=current)
            return current
    RAISE.min_depth = 0

    def SQLSTATE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='SQLSTATE', parent=parent)) as current:
            UnlexerRule(src='SQLSTATE', parent=current)
            return current
    SQLSTATE.min_depth = 0

    def DEBUG(self, parent=None):
        with RuleContext(self, UnlexerRule(name='DEBUG', parent=parent)) as current:
            UnlexerRule(src='DEBUG', parent=current)
            return current
    DEBUG.min_depth = 0

    def LOG(self, parent=None):
        with RuleContext(self, UnlexerRule(name='LOG', parent=parent)) as current:
            UnlexerRule(src='LOG', parent=current)
            return current
    LOG.min_depth = 0

    def INFO(self, parent=None):
        with RuleContext(self, UnlexerRule(name='INFO', parent=parent)) as current:
            UnlexerRule(src='INFO', parent=current)
            return current
    INFO.min_depth = 0

    def NOTICE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='NOTICE', parent=parent)) as current:
            UnlexerRule(src='NOTICE', parent=current)
            return current
    NOTICE.min_depth = 0

    def WARNING(self, parent=None):
        with RuleContext(self, UnlexerRule(name='WARNING', parent=parent)) as current:
            UnlexerRule(src='WARNING', parent=current)
            return current
    WARNING.min_depth = 0

    def EXCEPTION(self, parent=None):
        with RuleContext(self, UnlexerRule(name='EXCEPTION', parent=parent)) as current:
            UnlexerRule(src='EXCEPTION', parent=current)
            return current
    EXCEPTION.min_depth = 0

    def ASSERT(self, parent=None):
        with RuleContext(self, UnlexerRule(name='ASSERT', parent=parent)) as current:
            UnlexerRule(src='ASSERT', parent=current)
            return current
    ASSERT.min_depth = 0

    def LOOP(self, parent=None):
        with RuleContext(self, UnlexerRule(name='LOOP', parent=parent)) as current:
            UnlexerRule(src='LOOP', parent=current)
            return current
    LOOP.min_depth = 0

    def OPEN(self, parent=None):
        with RuleContext(self, UnlexerRule(name='OPEN', parent=parent)) as current:
            UnlexerRule(src='OPEN', parent=current)
            return current
    OPEN.min_depth = 0

    def ABS(self, parent=None):
        with RuleContext(self, UnlexerRule(name='ABS', parent=parent)) as current:
            UnlexerRule(src='ABS', parent=current)
            return current
    ABS.min_depth = 0

    def CBRT(self, parent=None):
        with RuleContext(self, UnlexerRule(name='CBRT', parent=parent)) as current:
            UnlexerRule(src='CBRT', parent=current)
            return current
    CBRT.min_depth = 0

    def CEIL(self, parent=None):
        with RuleContext(self, UnlexerRule(name='CEIL', parent=parent)) as current:
            UnlexerRule(src='CEIL', parent=current)
            return current
    CEIL.min_depth = 0

    def CEILING(self, parent=None):
        with RuleContext(self, UnlexerRule(name='CEILING', parent=parent)) as current:
            UnlexerRule(src='CEILING', parent=current)
            return current
    CEILING.min_depth = 0

    def DEGREES(self, parent=None):
        with RuleContext(self, UnlexerRule(name='DEGREES', parent=parent)) as current:
            UnlexerRule(src='DEGREES', parent=current)
            return current
    DEGREES.min_depth = 0

    def DIV(self, parent=None):
        with RuleContext(self, UnlexerRule(name='DIV', parent=parent)) as current:
            UnlexerRule(src='DIV', parent=current)
            return current
    DIV.min_depth = 0

    def EXP(self, parent=None):
        with RuleContext(self, UnlexerRule(name='EXP', parent=parent)) as current:
            UnlexerRule(src='EXP', parent=current)
            return current
    EXP.min_depth = 0

    def FACTORIAL(self, parent=None):
        with RuleContext(self, UnlexerRule(name='FACTORIAL', parent=parent)) as current:
            UnlexerRule(src='FACTORIAL', parent=current)
            return current
    FACTORIAL.min_depth = 0

    def FLOOR(self, parent=None):
        with RuleContext(self, UnlexerRule(name='FLOOR', parent=parent)) as current:
            UnlexerRule(src='FLOOR', parent=current)
            return current
    FLOOR.min_depth = 0

    def GCD(self, parent=None):
        with RuleContext(self, UnlexerRule(name='GCD', parent=parent)) as current:
            UnlexerRule(src='GCD', parent=current)
            return current
    GCD.min_depth = 0

    def LCM(self, parent=None):
        with RuleContext(self, UnlexerRule(name='LCM', parent=parent)) as current:
            UnlexerRule(src='LCM', parent=current)
            return current
    LCM.min_depth = 0

    def LN(self, parent=None):
        with RuleContext(self, UnlexerRule(name='LN', parent=parent)) as current:
            UnlexerRule(src='LN', parent=current)
            return current
    LN.min_depth = 0

    def LOG10(self, parent=None):
        with RuleContext(self, UnlexerRule(name='LOG10', parent=parent)) as current:
            UnlexerRule(src='LOG10', parent=current)
            return current
    LOG10.min_depth = 0

    def MIN_SCALE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='MIN_SCALE', parent=parent)) as current:
            UnlexerRule(src='MIN_SCALE', parent=current)
            return current
    MIN_SCALE.min_depth = 0

    def MOD(self, parent=None):
        with RuleContext(self, UnlexerRule(name='MOD', parent=parent)) as current:
            UnlexerRule(src='MOD', parent=current)
            return current
    MOD.min_depth = 0

    def PI(self, parent=None):
        with RuleContext(self, UnlexerRule(name='PI', parent=parent)) as current:
            UnlexerRule(src='PI', parent=current)
            return current
    PI.min_depth = 0

    def POWER(self, parent=None):
        with RuleContext(self, UnlexerRule(name='POWER', parent=parent)) as current:
            UnlexerRule(src='POWER', parent=current)
            return current
    POWER.min_depth = 0

    def RADIANS(self, parent=None):
        with RuleContext(self, UnlexerRule(name='RADIANS', parent=parent)) as current:
            UnlexerRule(src='RADIANS', parent=current)
            return current
    RADIANS.min_depth = 0

    def ROUND(self, parent=None):
        with RuleContext(self, UnlexerRule(name='ROUND', parent=parent)) as current:
            UnlexerRule(src='ROUND', parent=current)
            return current
    ROUND.min_depth = 0

    def SCALE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='SCALE', parent=parent)) as current:
            UnlexerRule(src='SCALE', parent=current)
            return current
    SCALE.min_depth = 0

    def SIGN(self, parent=None):
        with RuleContext(self, UnlexerRule(name='SIGN', parent=parent)) as current:
            UnlexerRule(src='SIGN', parent=current)
            return current
    SIGN.min_depth = 0

    def SQRT(self, parent=None):
        with RuleContext(self, UnlexerRule(name='SQRT', parent=parent)) as current:
            UnlexerRule(src='SQRT', parent=current)
            return current
    SQRT.min_depth = 0

    def TRIM_SCALE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='TRIM_SCALE', parent=parent)) as current:
            UnlexerRule(src='TRIM_SCALE', parent=current)
            return current
    TRIM_SCALE.min_depth = 0

    def TRUNC(self, parent=None):
        with RuleContext(self, UnlexerRule(name='TRUNC', parent=parent)) as current:
            UnlexerRule(src='TRUNC', parent=current)
            return current
    TRUNC.min_depth = 0

    def WIDTH_BUCKET(self, parent=None):
        with RuleContext(self, UnlexerRule(name='WIDTH_BUCKET', parent=parent)) as current:
            UnlexerRule(src='WIDTH_BUCKET', parent=current)
            return current
    WIDTH_BUCKET.min_depth = 0

    def RANDOM(self, parent=None):
        with RuleContext(self, UnlexerRule(name='RANDOM', parent=parent)) as current:
            UnlexerRule(src='RANDOM', parent=current)
            return current
    RANDOM.min_depth = 0

    def SETSEED(self, parent=None):
        with RuleContext(self, UnlexerRule(name='SETSEED', parent=parent)) as current:
            UnlexerRule(src='SETSEED', parent=current)
            return current
    SETSEED.min_depth = 0

    def ACOS(self, parent=None):
        with RuleContext(self, UnlexerRule(name='ACOS', parent=parent)) as current:
            UnlexerRule(src='ACOS', parent=current)
            return current
    ACOS.min_depth = 0

    def ACOSD(self, parent=None):
        with RuleContext(self, UnlexerRule(name='ACOSD', parent=parent)) as current:
            UnlexerRule(src='ACOSD', parent=current)
            return current
    ACOSD.min_depth = 0

    def ASIN(self, parent=None):
        with RuleContext(self, UnlexerRule(name='ASIN', parent=parent)) as current:
            UnlexerRule(src='ASIN', parent=current)
            return current
    ASIN.min_depth = 0

    def ASIND(self, parent=None):
        with RuleContext(self, UnlexerRule(name='ASIND', parent=parent)) as current:
            UnlexerRule(src='ASIND', parent=current)
            return current
    ASIND.min_depth = 0

    def ATAN(self, parent=None):
        with RuleContext(self, UnlexerRule(name='ATAN', parent=parent)) as current:
            UnlexerRule(src='ATAN', parent=current)
            return current
    ATAN.min_depth = 0

    def ATAND(self, parent=None):
        with RuleContext(self, UnlexerRule(name='ATAND', parent=parent)) as current:
            UnlexerRule(src='ATAND', parent=current)
            return current
    ATAND.min_depth = 0

    def ATAN2(self, parent=None):
        with RuleContext(self, UnlexerRule(name='ATAN2', parent=parent)) as current:
            UnlexerRule(src='ATAN2', parent=current)
            return current
    ATAN2.min_depth = 0

    def ATAN2D(self, parent=None):
        with RuleContext(self, UnlexerRule(name='ATAN2D', parent=parent)) as current:
            UnlexerRule(src='ATAN2D', parent=current)
            return current
    ATAN2D.min_depth = 0

    def COS(self, parent=None):
        with RuleContext(self, UnlexerRule(name='COS', parent=parent)) as current:
            UnlexerRule(src='COS', parent=current)
            return current
    COS.min_depth = 0

    def COSD(self, parent=None):
        with RuleContext(self, UnlexerRule(name='COSD', parent=parent)) as current:
            UnlexerRule(src='COSD', parent=current)
            return current
    COSD.min_depth = 0

    def COT(self, parent=None):
        with RuleContext(self, UnlexerRule(name='COT', parent=parent)) as current:
            UnlexerRule(src='COT', parent=current)
            return current
    COT.min_depth = 0

    def COTD(self, parent=None):
        with RuleContext(self, UnlexerRule(name='COTD', parent=parent)) as current:
            UnlexerRule(src='COTD', parent=current)
            return current
    COTD.min_depth = 0

    def SIN(self, parent=None):
        with RuleContext(self, UnlexerRule(name='SIN', parent=parent)) as current:
            UnlexerRule(src='SIN', parent=current)
            return current
    SIN.min_depth = 0

    def SIND(self, parent=None):
        with RuleContext(self, UnlexerRule(name='SIND', parent=parent)) as current:
            UnlexerRule(src='SIND', parent=current)
            return current
    SIND.min_depth = 0

    def TAN(self, parent=None):
        with RuleContext(self, UnlexerRule(name='TAN', parent=parent)) as current:
            UnlexerRule(src='TAN', parent=current)
            return current
    TAN.min_depth = 0

    def TAND(self, parent=None):
        with RuleContext(self, UnlexerRule(name='TAND', parent=parent)) as current:
            UnlexerRule(src='TAND', parent=current)
            return current
    TAND.min_depth = 0

    def SINH(self, parent=None):
        with RuleContext(self, UnlexerRule(name='SINH', parent=parent)) as current:
            UnlexerRule(src='SINH', parent=current)
            return current
    SINH.min_depth = 0

    def COSH(self, parent=None):
        with RuleContext(self, UnlexerRule(name='COSH', parent=parent)) as current:
            UnlexerRule(src='COSH', parent=current)
            return current
    COSH.min_depth = 0

    def TANH(self, parent=None):
        with RuleContext(self, UnlexerRule(name='TANH', parent=parent)) as current:
            UnlexerRule(src='TANH', parent=current)
            return current
    TANH.min_depth = 0

    def ASINH(self, parent=None):
        with RuleContext(self, UnlexerRule(name='ASINH', parent=parent)) as current:
            UnlexerRule(src='ASINH', parent=current)
            return current
    ASINH.min_depth = 0

    def ACOSH(self, parent=None):
        with RuleContext(self, UnlexerRule(name='ACOSH', parent=parent)) as current:
            UnlexerRule(src='ACOSH', parent=current)
            return current
    ACOSH.min_depth = 0

    def ATANH(self, parent=None):
        with RuleContext(self, UnlexerRule(name='ATANH', parent=parent)) as current:
            UnlexerRule(src='ATANH', parent=current)
            return current
    ATANH.min_depth = 0

    def BIT_LENGTH(self, parent=None):
        with RuleContext(self, UnlexerRule(name='BIT_LENGTH', parent=parent)) as current:
            UnlexerRule(src='BIT_LENGTH', parent=current)
            return current
    BIT_LENGTH.min_depth = 0

    def CHAR_LENGTH(self, parent=None):
        with RuleContext(self, UnlexerRule(name='CHAR_LENGTH', parent=parent)) as current:
            UnlexerRule(src='CHAR_LENGTH', parent=current)
            return current
    CHAR_LENGTH.min_depth = 0

    def CHARACTER_LENGTH(self, parent=None):
        with RuleContext(self, UnlexerRule(name='CHARACTER_LENGTH', parent=parent)) as current:
            UnlexerRule(src='CHARACTER_LENGTH', parent=current)
            return current
    CHARACTER_LENGTH.min_depth = 0

    def LOWER(self, parent=None):
        with RuleContext(self, UnlexerRule(name='LOWER', parent=parent)) as current:
            UnlexerRule(src='LOWER', parent=current)
            return current
    LOWER.min_depth = 0

    def OCTET_LENGTH(self, parent=None):
        with RuleContext(self, UnlexerRule(name='OCTET_LENGTH', parent=parent)) as current:
            UnlexerRule(src='OCTET_LENGTH', parent=current)
            return current
    OCTET_LENGTH.min_depth = 0

    def UPPER(self, parent=None):
        with RuleContext(self, UnlexerRule(name='UPPER', parent=parent)) as current:
            UnlexerRule(src='UPPER', parent=current)
            return current
    UPPER.min_depth = 0

    def ASCII(self, parent=None):
        with RuleContext(self, UnlexerRule(name='ASCII', parent=parent)) as current:
            UnlexerRule(src='ASCII', parent=current)
            return current
    ASCII.min_depth = 0

    def BTRIM(self, parent=None):
        with RuleContext(self, UnlexerRule(name='BTRIM', parent=parent)) as current:
            UnlexerRule(src='BTRIM', parent=current)
            return current
    BTRIM.min_depth = 0

    def CHR(self, parent=None):
        with RuleContext(self, UnlexerRule(name='CHR', parent=parent)) as current:
            UnlexerRule(src='CHR', parent=current)
            return current
    CHR.min_depth = 0

    def CONCAT(self, parent=None):
        with RuleContext(self, UnlexerRule(name='CONCAT', parent=parent)) as current:
            UnlexerRule(src='CONCAT', parent=current)
            return current
    CONCAT.min_depth = 0

    def CONCAT_WS(self, parent=None):
        with RuleContext(self, UnlexerRule(name='CONCAT_WS', parent=parent)) as current:
            UnlexerRule(src='CONCAT_WS', parent=current)
            return current
    CONCAT_WS.min_depth = 0

    def FORMAT(self, parent=None):
        with RuleContext(self, UnlexerRule(name='FORMAT', parent=parent)) as current:
            UnlexerRule(src='FORMAT', parent=current)
            return current
    FORMAT.min_depth = 0

    def INITCAP(self, parent=None):
        with RuleContext(self, UnlexerRule(name='INITCAP', parent=parent)) as current:
            UnlexerRule(src='INITCAP', parent=current)
            return current
    INITCAP.min_depth = 0

    def LENGTH(self, parent=None):
        with RuleContext(self, UnlexerRule(name='LENGTH', parent=parent)) as current:
            UnlexerRule(src='LENGTH', parent=current)
            return current
    LENGTH.min_depth = 0

    def LPAD(self, parent=None):
        with RuleContext(self, UnlexerRule(name='LPAD', parent=parent)) as current:
            UnlexerRule(src='LPAD', parent=current)
            return current
    LPAD.min_depth = 0

    def LTRIM(self, parent=None):
        with RuleContext(self, UnlexerRule(name='LTRIM', parent=parent)) as current:
            UnlexerRule(src='LTRIM', parent=current)
            return current
    LTRIM.min_depth = 0

    def MD5(self, parent=None):
        with RuleContext(self, UnlexerRule(name='MD5', parent=parent)) as current:
            UnlexerRule(src='MD5', parent=current)
            return current
    MD5.min_depth = 0

    def PARSE_IDENT(self, parent=None):
        with RuleContext(self, UnlexerRule(name='PARSE_IDENT', parent=parent)) as current:
            UnlexerRule(src='PARSE_IDENT', parent=current)
            return current
    PARSE_IDENT.min_depth = 0

    def PG_CLIENT_ENCODING(self, parent=None):
        with RuleContext(self, UnlexerRule(name='PG_CLIENT_ENCODING', parent=parent)) as current:
            UnlexerRule(src='PG_CLIENT_ENCODING', parent=current)
            return current
    PG_CLIENT_ENCODING.min_depth = 0

    def QUOTE_IDENT(self, parent=None):
        with RuleContext(self, UnlexerRule(name='QUOTE_IDENT', parent=parent)) as current:
            UnlexerRule(src='QUOTE_IDENT', parent=current)
            return current
    QUOTE_IDENT.min_depth = 0

    def QUOTE_LITERAL(self, parent=None):
        with RuleContext(self, UnlexerRule(name='QUOTE_LITERAL', parent=parent)) as current:
            UnlexerRule(src='QUOTE_LITERAL', parent=current)
            return current
    QUOTE_LITERAL.min_depth = 0

    def QUOTE_NULLABLE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='QUOTE_NULLABLE', parent=parent)) as current:
            UnlexerRule(src='QUOTE_NULLABLE', parent=current)
            return current
    QUOTE_NULLABLE.min_depth = 0

    def REGEXP_COUNT(self, parent=None):
        with RuleContext(self, UnlexerRule(name='REGEXP_COUNT', parent=parent)) as current:
            UnlexerRule(src='REGEXP_COUNT', parent=current)
            return current
    REGEXP_COUNT.min_depth = 0

    def REGEXP_INSTR(self, parent=None):
        with RuleContext(self, UnlexerRule(name='REGEXP_INSTR', parent=parent)) as current:
            UnlexerRule(src='REGEXP_INSTR', parent=current)
            return current
    REGEXP_INSTR.min_depth = 0

    def REGEXP_LIKE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='REGEXP_LIKE', parent=parent)) as current:
            UnlexerRule(src='REGEXP_LIKE', parent=current)
            return current
    REGEXP_LIKE.min_depth = 0

    def REGEXP_MATCH(self, parent=None):
        with RuleContext(self, UnlexerRule(name='REGEXP_MATCH', parent=parent)) as current:
            UnlexerRule(src='REGEXP_MATCH', parent=current)
            return current
    REGEXP_MATCH.min_depth = 0

    def REGEXP_MATCHES(self, parent=None):
        with RuleContext(self, UnlexerRule(name='REGEXP_MATCHES', parent=parent)) as current:
            UnlexerRule(src='REGEXP_MATCHES', parent=current)
            return current
    REGEXP_MATCHES.min_depth = 0

    def REGEXP_REPLACE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='REGEXP_REPLACE', parent=parent)) as current:
            UnlexerRule(src='REGEXP_REPLACE', parent=current)
            return current
    REGEXP_REPLACE.min_depth = 0

    def REGEXP_SPLIT_TO_ARRAY(self, parent=None):
        with RuleContext(self, UnlexerRule(name='REGEXP_SPLIT_TO_ARRAY', parent=parent)) as current:
            UnlexerRule(src='REGEXP_SPLIT_TO_ARRAY', parent=current)
            return current
    REGEXP_SPLIT_TO_ARRAY.min_depth = 0

    def REGEXP_SPLIT_TO_TABLE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='REGEXP_SPLIT_TO_TABLE', parent=parent)) as current:
            UnlexerRule(src='REGEXP_SPLIT_TO_TABLE', parent=current)
            return current
    REGEXP_SPLIT_TO_TABLE.min_depth = 0

    def REGEXP_SUBSTR(self, parent=None):
        with RuleContext(self, UnlexerRule(name='REGEXP_SUBSTR', parent=parent)) as current:
            UnlexerRule(src='REGEXP_SUBSTR', parent=current)
            return current
    REGEXP_SUBSTR.min_depth = 0

    def REPEAT(self, parent=None):
        with RuleContext(self, UnlexerRule(name='REPEAT', parent=parent)) as current:
            UnlexerRule(src='REPEAT', parent=current)
            return current
    REPEAT.min_depth = 0

    def RPAD(self, parent=None):
        with RuleContext(self, UnlexerRule(name='RPAD', parent=parent)) as current:
            UnlexerRule(src='RPAD', parent=current)
            return current
    RPAD.min_depth = 0

    def RTRIM(self, parent=None):
        with RuleContext(self, UnlexerRule(name='RTRIM', parent=parent)) as current:
            UnlexerRule(src='RTRIM', parent=current)
            return current
    RTRIM.min_depth = 0

    def SPLIT_PART(self, parent=None):
        with RuleContext(self, UnlexerRule(name='SPLIT_PART', parent=parent)) as current:
            UnlexerRule(src='SPLIT_PART', parent=current)
            return current
    SPLIT_PART.min_depth = 0

    def STARTS_WITH(self, parent=None):
        with RuleContext(self, UnlexerRule(name='STARTS_WITH', parent=parent)) as current:
            UnlexerRule(src='STARTS_WITH', parent=current)
            return current
    STARTS_WITH.min_depth = 0

    def STRING_TO_ARRAY(self, parent=None):
        with RuleContext(self, UnlexerRule(name='STRING_TO_ARRAY', parent=parent)) as current:
            UnlexerRule(src='STRING_TO_ARRAY', parent=current)
            return current
    STRING_TO_ARRAY.min_depth = 0

    def STRING_TO_TABLE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='STRING_TO_TABLE', parent=parent)) as current:
            UnlexerRule(src='STRING_TO_TABLE', parent=current)
            return current
    STRING_TO_TABLE.min_depth = 0

    def STRPOS(self, parent=None):
        with RuleContext(self, UnlexerRule(name='STRPOS', parent=parent)) as current:
            UnlexerRule(src='STRPOS', parent=current)
            return current
    STRPOS.min_depth = 0

    def SUBSTR(self, parent=None):
        with RuleContext(self, UnlexerRule(name='SUBSTR', parent=parent)) as current:
            UnlexerRule(src='SUBSTR', parent=current)
            return current
    SUBSTR.min_depth = 0

    def TO_ASCII(self, parent=None):
        with RuleContext(self, UnlexerRule(name='TO_ASCII', parent=parent)) as current:
            UnlexerRule(src='TO_ASCII', parent=current)
            return current
    TO_ASCII.min_depth = 0

    def TO_HEX(self, parent=None):
        with RuleContext(self, UnlexerRule(name='TO_HEX', parent=parent)) as current:
            UnlexerRule(src='TO_HEX', parent=current)
            return current
    TO_HEX.min_depth = 0

    def TRANSLATE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='TRANSLATE', parent=parent)) as current:
            UnlexerRule(src='TRANSLATE', parent=current)
            return current
    TRANSLATE.min_depth = 0

    def UNISTR(self, parent=None):
        with RuleContext(self, UnlexerRule(name='UNISTR', parent=parent)) as current:
            UnlexerRule(src='UNISTR', parent=current)
            return current
    UNISTR.min_depth = 0

    def AGE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='AGE', parent=parent)) as current:
            UnlexerRule(src='AGE', parent=current)
            return current
    AGE.min_depth = 0

    def CLOCK_TIMESTAMP(self, parent=None):
        with RuleContext(self, UnlexerRule(name='CLOCK_TIMESTAMP', parent=parent)) as current:
            UnlexerRule(src='CLOCK_TIMESTAMP', parent=current)
            return current
    CLOCK_TIMESTAMP.min_depth = 0

    def DATE_BIN(self, parent=None):
        with RuleContext(self, UnlexerRule(name='DATE_BIN', parent=parent)) as current:
            UnlexerRule(src='DATE_BIN', parent=current)
            return current
    DATE_BIN.min_depth = 0

    def DATE_PART(self, parent=None):
        with RuleContext(self, UnlexerRule(name='DATE_PART', parent=parent)) as current:
            UnlexerRule(src='DATE_PART', parent=current)
            return current
    DATE_PART.min_depth = 0

    def DATE_TRUNC(self, parent=None):
        with RuleContext(self, UnlexerRule(name='DATE_TRUNC', parent=parent)) as current:
            UnlexerRule(src='DATE_TRUNC', parent=current)
            return current
    DATE_TRUNC.min_depth = 0

    def ISFINITE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='ISFINITE', parent=parent)) as current:
            UnlexerRule(src='ISFINITE', parent=current)
            return current
    ISFINITE.min_depth = 0

    def JUSTIFY_DAYS(self, parent=None):
        with RuleContext(self, UnlexerRule(name='JUSTIFY_DAYS', parent=parent)) as current:
            UnlexerRule(src='JUSTIFY_DAYS', parent=current)
            return current
    JUSTIFY_DAYS.min_depth = 0

    def JUSTIFY_HOURS(self, parent=None):
        with RuleContext(self, UnlexerRule(name='JUSTIFY_HOURS', parent=parent)) as current:
            UnlexerRule(src='JUSTIFY_HOURS', parent=current)
            return current
    JUSTIFY_HOURS.min_depth = 0

    def JUSTIFY_INTERVAL(self, parent=None):
        with RuleContext(self, UnlexerRule(name='JUSTIFY_INTERVAL', parent=parent)) as current:
            UnlexerRule(src='JUSTIFY_INTERVAL', parent=current)
            return current
    JUSTIFY_INTERVAL.min_depth = 0

    def MAKE_DATE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='MAKE_DATE', parent=parent)) as current:
            UnlexerRule(src='MAKE_DATE', parent=current)
            return current
    MAKE_DATE.min_depth = 0

    def MAKE_INTERVAL(self, parent=None):
        with RuleContext(self, UnlexerRule(name='MAKE_INTERVAL', parent=parent)) as current:
            UnlexerRule(src='MAKE_INTERVAL', parent=current)
            return current
    MAKE_INTERVAL.min_depth = 0

    def MAKE_TIME(self, parent=None):
        with RuleContext(self, UnlexerRule(name='MAKE_TIME', parent=parent)) as current:
            UnlexerRule(src='MAKE_TIME', parent=current)
            return current
    MAKE_TIME.min_depth = 0

    def MAKE_TIMESTAMP(self, parent=None):
        with RuleContext(self, UnlexerRule(name='MAKE_TIMESTAMP', parent=parent)) as current:
            UnlexerRule(src='MAKE_TIMESTAMP', parent=current)
            return current
    MAKE_TIMESTAMP.min_depth = 0

    def MAKE_TIMESTAMPTZ(self, parent=None):
        with RuleContext(self, UnlexerRule(name='MAKE_TIMESTAMPTZ', parent=parent)) as current:
            UnlexerRule(src='MAKE_TIMESTAMPTZ', parent=current)
            return current
    MAKE_TIMESTAMPTZ.min_depth = 0

    def NOW(self, parent=None):
        with RuleContext(self, UnlexerRule(name='NOW', parent=parent)) as current:
            UnlexerRule(src='NOW', parent=current)
            return current
    NOW.min_depth = 0

    def STATEMENT_TIMESTAMP(self, parent=None):
        with RuleContext(self, UnlexerRule(name='STATEMENT_TIMESTAMP', parent=parent)) as current:
            UnlexerRule(src='STATEMENT_TIMESTAMP', parent=current)
            return current
    STATEMENT_TIMESTAMP.min_depth = 0

    def TIMEOFDAY(self, parent=None):
        with RuleContext(self, UnlexerRule(name='TIMEOFDAY', parent=parent)) as current:
            UnlexerRule(src='TIMEOFDAY', parent=current)
            return current
    TIMEOFDAY.min_depth = 0

    def TRANSACTION_TIMESTAMP(self, parent=None):
        with RuleContext(self, UnlexerRule(name='TRANSACTION_TIMESTAMP', parent=parent)) as current:
            UnlexerRule(src='TRANSACTION_TIMESTAMP', parent=current)
            return current
    TRANSACTION_TIMESTAMP.min_depth = 0

    def TO_TIMESTAMP(self, parent=None):
        with RuleContext(self, UnlexerRule(name='TO_TIMESTAMP', parent=parent)) as current:
            UnlexerRule(src='TO_TIMESTAMP', parent=current)
            return current
    TO_TIMESTAMP.min_depth = 0

    def TO_CHAR(self, parent=None):
        with RuleContext(self, UnlexerRule(name='TO_CHAR', parent=parent)) as current:
            UnlexerRule(src='TO_CHAR', parent=current)
            return current
    TO_CHAR.min_depth = 0

    def TO_DATE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='TO_DATE', parent=parent)) as current:
            UnlexerRule(src='TO_DATE', parent=current)
            return current
    TO_DATE.min_depth = 0

    def TO_NUMBER(self, parent=None):
        with RuleContext(self, UnlexerRule(name='TO_NUMBER', parent=parent)) as current:
            UnlexerRule(src='TO_NUMBER', parent=current)
            return current
    TO_NUMBER.min_depth = 0

    def Identifier(self, parent=None):
        with RuleContext(self, UnlexerRule(name='Identifier', parent=parent)) as current:
            self.IdentifierStartChar(parent=current)
            if self._max_depth >= 1:
                for _ in self._model.quantify(current, 0, min=0, max=inf):
                    self.IdentifierChar(parent=current)
            return current
    Identifier.min_depth = 1

    def IdentifierStartChar(self, parent=None):
        with RuleContext(self, UnlexerRule(name='IdentifierStartChar', parent=parent)) as current:
            UnlexerRule(src=self._model.charset(current, 0, self._charsets[6]), parent=current)
            return current
    IdentifierStartChar.min_depth = 0

    def IdentifierChar(self, parent=None):
        with RuleContext(self, UnlexerRule(name='IdentifierChar', parent=parent)) as current:
            with AlternationContext(self, [1, 0], [1, 1]) as weights0:
                choice0 = self._model.choice(current, 0, weights0)
                src = [None, '$'][choice0]
                rule = [self.StrictIdentifierChar, None][choice0]
                if src is not None:
                    UnlexerRule(src=src, parent=current)
                else:
                    rule(parent=current)
            return current
    IdentifierChar.min_depth = 0

    def StrictIdentifierChar(self, parent=None):
        with RuleContext(self, UnlexerRule(name='StrictIdentifierChar', parent=parent)) as current:
            with AlternationContext(self, [1, 0], [1, 1]) as weights0:
                choice0 = self._model.choice(current, 0, weights0)
                if choice0 == 0:
                    self.IdentifierStartChar(parent=current)
                elif choice0 == 1:
                    UnlexerRule(src=self._model.charset(current, 0, self._charsets[7]), parent=current)
            return current
    StrictIdentifierChar.min_depth = 0

    def QuotedIdentifier(self, parent=None):
        with RuleContext(self, UnlexerRule(name='QuotedIdentifier', parent=parent)) as current:
            self.UnterminatedQuotedIdentifier(parent=current)
            UnlexerRule(src='"', parent=current)
            return current
    QuotedIdentifier.min_depth = 1

    def UnterminatedQuotedIdentifier(self, parent=None):
        with RuleContext(self, UnlexerRule(name='UnterminatedQuotedIdentifier', parent=parent)) as current:
            UnlexerRule(src='"', parent=current)
            if self._max_depth >= 0:
                for _ in self._model.quantify(current, 0, min=0, max=inf):
                    with AlternationContext(self, [0, 0], [1, 1]) as weights0:
                        choice0 = self._model.choice(current, 0, weights0)
                        if choice0 == 0:
                            UnlexerRule(src='""', parent=current)
                        elif choice0 == 1:
                            UnlexerRule(src=self._model.charset(current, 0, self._charsets[8]), parent=current)
            return current
    UnterminatedQuotedIdentifier.min_depth = 0

    def InvalidQuotedIdentifier(self, parent=None):
        with RuleContext(self, UnlexerRule(name='InvalidQuotedIdentifier', parent=parent)) as current:
            self.InvalidUnterminatedQuotedIdentifier(parent=current)
            UnlexerRule(src='"', parent=current)
            return current
    InvalidQuotedIdentifier.min_depth = 1

    def InvalidUnterminatedQuotedIdentifier(self, parent=None):
        with RuleContext(self, UnlexerRule(name='InvalidUnterminatedQuotedIdentifier', parent=parent)) as current:
            UnlexerRule(src='"', parent=current)
            if self._max_depth >= 0:
                for _ in self._model.quantify(current, 0, min=0, max=inf):
                    with AlternationContext(self, [0, 0], [1, 1]) as weights0:
                        choice0 = self._model.choice(current, 0, weights0)
                        if choice0 == 0:
                            UnlexerRule(src='""', parent=current)
                        elif choice0 == 1:
                            UnlexerRule(src=self._model.charset(current, 0, self._charsets[9]), parent=current)
            return current
    InvalidUnterminatedQuotedIdentifier.min_depth = 0

    def UnicodeQuotedIdentifier(self, parent=None):
        with RuleContext(self, UnlexerRule(name='UnicodeQuotedIdentifier', parent=parent)) as current:
            UnlexerRule(src='U', parent=current)
            UnlexerRule(src='&', parent=current)
            self.QuotedIdentifier(parent=current)
            return current
    UnicodeQuotedIdentifier.min_depth = 2

    def UnterminatedUnicodeQuotedIdentifier(self, parent=None):
        with RuleContext(self, UnlexerRule(name='UnterminatedUnicodeQuotedIdentifier', parent=parent)) as current:
            UnlexerRule(src='U', parent=current)
            UnlexerRule(src='&', parent=current)
            self.UnterminatedQuotedIdentifier(parent=current)
            return current
    UnterminatedUnicodeQuotedIdentifier.min_depth = 1

    def InvalidUnicodeQuotedIdentifier(self, parent=None):
        with RuleContext(self, UnlexerRule(name='InvalidUnicodeQuotedIdentifier', parent=parent)) as current:
            UnlexerRule(src='U', parent=current)
            UnlexerRule(src='&', parent=current)
            self.InvalidQuotedIdentifier(parent=current)
            return current
    InvalidUnicodeQuotedIdentifier.min_depth = 2

    def InvalidUnterminatedUnicodeQuotedIdentifier(self, parent=None):
        with RuleContext(self, UnlexerRule(name='InvalidUnterminatedUnicodeQuotedIdentifier', parent=parent)) as current:
            UnlexerRule(src='U', parent=current)
            UnlexerRule(src='&', parent=current)
            self.InvalidUnterminatedQuotedIdentifier(parent=current)
            return current
    InvalidUnterminatedUnicodeQuotedIdentifier.min_depth = 1

    def StringConstant(self, parent=None):
        with RuleContext(self, UnlexerRule(name='StringConstant', parent=parent)) as current:
            self.UnterminatedStringConstant(parent=current)
            UnlexerRule(src='\'', parent=current)
            return current
    StringConstant.min_depth = 1

    def UnterminatedStringConstant(self, parent=None):
        with RuleContext(self, UnlexerRule(name='UnterminatedStringConstant', parent=parent)) as current:
            UnlexerRule(src='\'', parent=current)
            if self._max_depth >= 0:
                for _ in self._model.quantify(current, 0, min=0, max=inf):
                    with AlternationContext(self, [0, 0], [1, 1]) as weights0:
                        choice0 = self._model.choice(current, 0, weights0)
                        if choice0 == 0:
                            UnlexerRule(src='\'\'', parent=current)
                        elif choice0 == 1:
                            UnlexerRule(src=self._model.charset(current, 0, self._charsets[10]), parent=current)
            return current
    UnterminatedStringConstant.min_depth = 0

    def BeginEscapeStringConstant(self, parent=None):
        with RuleContext(self, UnlexerRule(name='BeginEscapeStringConstant', parent=parent)) as current:
            UnlexerRule(src='E', parent=current)
            UnlexerRule(src='\'', parent=current)
            return current
    BeginEscapeStringConstant.min_depth = 0

    def UnicodeEscapeStringConstant(self, parent=None):
        with RuleContext(self, UnlexerRule(name='UnicodeEscapeStringConstant', parent=parent)) as current:
            self.UnterminatedUnicodeEscapeStringConstant(parent=current)
            UnlexerRule(src='\'', parent=current)
            return current
    UnicodeEscapeStringConstant.min_depth = 2

    def UnterminatedUnicodeEscapeStringConstant(self, parent=None):
        with RuleContext(self, UnlexerRule(name='UnterminatedUnicodeEscapeStringConstant', parent=parent)) as current:
            UnlexerRule(src='U', parent=current)
            UnlexerRule(src='&', parent=current)
            self.UnterminatedStringConstant(parent=current)
            return current
    UnterminatedUnicodeEscapeStringConstant.min_depth = 1

    def BeginDollarStringConstant(self, parent=None):
        with RuleContext(self, UnlexerRule(name='BeginDollarStringConstant', parent=parent)) as current:
            UnlexerRule(src='$', parent=current)
            if self._max_depth >= 2:
                for _ in self._model.quantify(current, 0, min=0, max=1):
                    self.Tag(parent=current)
            UnlexerRule(src='$', parent=current)
            return current
    BeginDollarStringConstant.min_depth = 0

    def Tag(self, parent=None):
        with RuleContext(self, UnlexerRule(name='Tag', parent=parent)) as current:
            self.IdentifierStartChar(parent=current)
            if self._max_depth >= 1:
                for _ in self._model.quantify(current, 0, min=0, max=inf):
                    self.StrictIdentifierChar(parent=current)
            return current
    Tag.min_depth = 1

    def BinaryStringConstant(self, parent=None):
        with RuleContext(self, UnlexerRule(name='BinaryStringConstant', parent=parent)) as current:
            self.UnterminatedBinaryStringConstant(parent=current)
            UnlexerRule(src='\'', parent=current)
            return current
    BinaryStringConstant.min_depth = 1

    def UnterminatedBinaryStringConstant(self, parent=None):
        with RuleContext(self, UnlexerRule(name='UnterminatedBinaryStringConstant', parent=parent)) as current:
            UnlexerRule(src='B', parent=current)
            UnlexerRule(src='\'', parent=current)
            if self._max_depth >= 0:
                for _ in self._model.quantify(current, 0, min=0, max=inf):
                    UnlexerRule(src=self._model.charset(current, 0, self._charsets[11]), parent=current)
            return current
    UnterminatedBinaryStringConstant.min_depth = 0

    def InvalidBinaryStringConstant(self, parent=None):
        with RuleContext(self, UnlexerRule(name='InvalidBinaryStringConstant', parent=parent)) as current:
            self.InvalidUnterminatedBinaryStringConstant(parent=current)
            UnlexerRule(src='\'', parent=current)
            return current
    InvalidBinaryStringConstant.min_depth = 2

    def InvalidUnterminatedBinaryStringConstant(self, parent=None):
        with RuleContext(self, UnlexerRule(name='InvalidUnterminatedBinaryStringConstant', parent=parent)) as current:
            UnlexerRule(src='B', parent=current)
            self.UnterminatedStringConstant(parent=current)
            return current
    InvalidUnterminatedBinaryStringConstant.min_depth = 1

    def HexadecimalStringConstant(self, parent=None):
        with RuleContext(self, UnlexerRule(name='HexadecimalStringConstant', parent=parent)) as current:
            self.UnterminatedHexadecimalStringConstant(parent=current)
            UnlexerRule(src='\'', parent=current)
            return current
    HexadecimalStringConstant.min_depth = 1

    def UnterminatedHexadecimalStringConstant(self, parent=None):
        with RuleContext(self, UnlexerRule(name='UnterminatedHexadecimalStringConstant', parent=parent)) as current:
            UnlexerRule(src='X', parent=current)
            UnlexerRule(src='\'', parent=current)
            if self._max_depth >= 0:
                for _ in self._model.quantify(current, 0, min=0, max=inf):
                    UnlexerRule(src=self._model.charset(current, 0, self._charsets[12]), parent=current)
            return current
    UnterminatedHexadecimalStringConstant.min_depth = 0

    def InvalidHexadecimalStringConstant(self, parent=None):
        with RuleContext(self, UnlexerRule(name='InvalidHexadecimalStringConstant', parent=parent)) as current:
            self.InvalidUnterminatedHexadecimalStringConstant(parent=current)
            UnlexerRule(src='\'', parent=current)
            return current
    InvalidHexadecimalStringConstant.min_depth = 2

    def InvalidUnterminatedHexadecimalStringConstant(self, parent=None):
        with RuleContext(self, UnlexerRule(name='InvalidUnterminatedHexadecimalStringConstant', parent=parent)) as current:
            UnlexerRule(src='X', parent=current)
            self.UnterminatedStringConstant(parent=current)
            return current
    InvalidUnterminatedHexadecimalStringConstant.min_depth = 1

    def Integral(self, parent=None):
        with RuleContext(self, UnlexerRule(name='Integral', parent=parent)) as current:
            self.Digits(parent=current)
            return current
    Integral.min_depth = 1

    def NumericFail(self, parent=None):
        with RuleContext(self, UnlexerRule(name='NumericFail', parent=parent)) as current:
            self.Digits(parent=current)
            UnlexerRule(src='..', parent=current)
            return current
    NumericFail.min_depth = 1

    def Numeric(self, parent=None):
        with RuleContext(self, UnlexerRule(name='Numeric', parent=parent)) as current:
            with AlternationContext(self, [1, 1, 1], [1, 1, 1]) as weights0:
                choice0 = self._model.choice(current, 0, weights0)
                if choice0 == 0:
                    self.Digits(parent=current)
                    UnlexerRule(src='.', parent=current)
                    if self._max_depth >= 1:
                        for _ in self._model.quantify(current, 0, min=0, max=1):
                            self.Digits(parent=current)
                    if self._max_depth >= 1:
                        for _ in self._model.quantify(current, 1, min=0, max=1):
                            UnlexerRule(src='E', parent=current)
                            if self._max_depth >= 0:
                                for _ in self._model.quantify(current, 2, min=0, max=1):
                                    UnlexerRule(src=self._model.charset(current, 0, self._charsets[13]), parent=current)
                            self.Digits(parent=current)
                elif choice0 == 1:
                    UnlexerRule(src='.', parent=current)
                    self.Digits(parent=current)
                    if self._max_depth >= 1:
                        for _ in self._model.quantify(current, 3, min=0, max=1):
                            UnlexerRule(src='E', parent=current)
                            if self._max_depth >= 0:
                                for _ in self._model.quantify(current, 4, min=0, max=1):
                                    UnlexerRule(src=self._model.charset(current, 1, self._charsets[14]), parent=current)
                            self.Digits(parent=current)
                elif choice0 == 2:
                    self.Digits(parent=current)
                    UnlexerRule(src='E', parent=current)
                    if self._max_depth >= 0:
                        for _ in self._model.quantify(current, 5, min=0, max=1):
                            UnlexerRule(src=self._model.charset(current, 2, self._charsets[15]), parent=current)
                    self.Digits(parent=current)
            return current
    Numeric.min_depth = 1

    def Digits(self, parent=None):
        with RuleContext(self, UnlexerRule(name='Digits', parent=parent)) as current:
            if self._max_depth >= 0:
                for _ in self._model.quantify(current, 0, min=1, max=inf):
                    UnlexerRule(src=self._model.charset(current, 0, self._charsets[16]), parent=current)
            return current
    Digits.min_depth = 0

    def PLSQLVARIABLENAME(self, parent=None):
        with RuleContext(self, UnlexerRule(name='PLSQLVARIABLENAME', parent=parent)) as current:
            UnlexerRule(src=':', parent=current)
            UnlexerRule(src=self._model.charset(current, 0, self._charsets[17]), parent=current)
            if self._max_depth >= 0:
                for _ in self._model.quantify(current, 0, min=0, max=inf):
                    UnlexerRule(src=self._model.charset(current, 1, self._charsets[18]), parent=current)
            return current
    PLSQLVARIABLENAME.min_depth = 0

    def PLSQLIDENTIFIER(self, parent=None):
        with RuleContext(self, UnlexerRule(name='PLSQLIDENTIFIER', parent=parent)) as current:
            UnlexerRule(src=':"', parent=current)
            if self._max_depth >= 0:
                for _ in self._model.quantify(current, 0, min=0, max=inf):
                    with AlternationContext(self, [0, 0, 0], [1, 1, 1]) as weights0:
                        choice0 = self._model.choice(current, 0, weights0)
                        if choice0 == 0:
                            UnlexerRule(src='\\', parent=current)
                            UnlexerRule(src=self._model.charset(current, 0, self._charsets[0]), parent=current)
                        elif choice0 == 1:
                            UnlexerRule(src='""', parent=current)
                        elif choice0 == 2:
                            UnlexerRule(src=self._model.charset(current, 1, self._charsets[19]), parent=current)
            UnlexerRule(src='"', parent=current)
            return current
    PLSQLIDENTIFIER.min_depth = 0

    def Whitespace(self, parent=None):
        with RuleContext(self, UnlexerRule(name='Whitespace', parent=parent)) as current:
            if self._max_depth >= 0:
                for _ in self._model.quantify(current, 0, min=1, max=inf):
                    UnlexerRule(src=self._model.charset(current, 0, self._charsets[20]), parent=current)
            return current
    Whitespace.min_depth = 0

    def Newline(self, parent=None):
        with RuleContext(self, UnlexerRule(name='Newline', parent=parent)) as current:
            with AlternationContext(self, [0, 0], [1, 1]) as weights0:
                choice0 = self._model.choice(current, 0, weights0)
                if choice0 == 0:
                    UnlexerRule(src='\r', parent=current)
                    if self._max_depth >= 0:
                        for _ in self._model.quantify(current, 0, min=0, max=1):
                            UnlexerRule(src='\n', parent=current)
                elif choice0 == 1:
                    UnlexerRule(src='\n', parent=current)
            return current
    Newline.min_depth = 0

    def LineComment(self, parent=None):
        with RuleContext(self, UnlexerRule(name='LineComment', parent=parent)) as current:
            UnlexerRule(src='--', parent=current)
            if self._max_depth >= 0:
                for _ in self._model.quantify(current, 0, min=0, max=inf):
                    UnlexerRule(src=self._model.charset(current, 0, self._charsets[21]), parent=current)
            return current
    LineComment.min_depth = 0

    def BlockComment(self, parent=None):
        with RuleContext(self, UnlexerRule(name='BlockComment', parent=parent)) as current:
            UnlexerRule(src='/*', parent=current)
            if self._max_depth >= 0:
                for _ in self._model.quantify(current, 0, min=0, max=inf):
                    with AlternationContext(self, [1, 0, 0, 0], [1, 1, 1, 1]) as weights0:
                        choice0 = self._model.choice(current, 0, weights0)
                        if choice0 == 0:
                            if self._max_depth >= 0:
                                for _ in self._model.quantify(current, 1, min=0, max=inf):
                                    UnlexerRule(src='/', parent=current)
                            self.BlockComment(parent=current)
                        elif choice0 == 1:
                            UnlexerRule(src=self._model.charset(current, 0, self._charsets[22]), parent=current)
                        elif choice0 == 2:
                            if self._max_depth >= 0:
                                for _ in self._model.quantify(current, 2, min=1, max=inf):
                                    UnlexerRule(src='/', parent=current)
                            UnlexerRule(src=self._model.charset(current, 1, self._charsets[23]), parent=current)
                        elif choice0 == 3:
                            if self._max_depth >= 0:
                                for _ in self._model.quantify(current, 3, min=1, max=inf):
                                    UnlexerRule(src='*', parent=current)
                            UnlexerRule(src=self._model.charset(current, 2, self._charsets[24]), parent=current)
            if self._max_depth >= 0:
                for _ in self._model.quantify(current, 4, min=0, max=inf):
                    UnlexerRule(src='*', parent=current)
            UnlexerRule(src='*/', parent=current)
            return current
    BlockComment.min_depth = 0

    def UnterminatedBlockComment(self, parent=None):
        with RuleContext(self, UnlexerRule(name='UnterminatedBlockComment', parent=parent)) as current:
            UnlexerRule(src='/*', parent=current)
            if self._max_depth >= 0:
                for _ in self._model.quantify(current, 0, min=0, max=inf):
                    with AlternationContext(self, [1, 0, 0], [1, 1, 1]) as weights0:
                        choice0 = self._model.choice(current, 0, weights0)
                        if choice0 == 0:
                            if self._max_depth >= 0:
                                for _ in self._model.quantify(current, 1, min=0, max=inf):
                                    UnlexerRule(src='/', parent=current)
                            self.BlockComment(parent=current)
                        elif choice0 == 1:
                            UnlexerRule(src=self._model.charset(current, 0, self._charsets[25]), parent=current)
                        elif choice0 == 2:
                            with AlternationContext(self, [0, 0], [1, 1]) as weights1:
                                choice1 = self._model.choice(current, 1, weights1)
                                if choice1 == 0:
                                    if self._max_depth >= 0:
                                        for _ in self._model.quantify(current, 2, min=1, max=inf):
                                            UnlexerRule(src='/', parent=current)
                                    UnlexerRule(src=self._model.charset(current, 1, self._charsets[26]), parent=current)
                                elif choice1 == 1:
                                    if self._max_depth >= 0:
                                        for _ in self._model.quantify(current, 3, min=1, max=inf):
                                            UnlexerRule(src='*', parent=current)
                                    UnlexerRule(src=self._model.charset(current, 2, self._charsets[27]), parent=current)
            if self._max_depth >= 0:
                for _ in self._model.quantify(current, 4, min=0, max=1):
                    with AlternationContext(self, [0, 0, 1], [1, 1, 1]) as weights2:
                        choice2 = self._model.choice(current, 2, weights2)
                        if choice2 == 0:
                            if self._max_depth >= 0:
                                for _ in self._model.quantify(current, 5, min=1, max=inf):
                                    UnlexerRule(src='/', parent=current)
                        elif choice2 == 1:
                            if self._max_depth >= 0:
                                for _ in self._model.quantify(current, 6, min=1, max=inf):
                                    UnlexerRule(src='*', parent=current)
                        elif choice2 == 2:
                            if self._max_depth >= 0:
                                for _ in self._model.quantify(current, 7, min=0, max=inf):
                                    UnlexerRule(src='/', parent=current)
                            self.UnterminatedBlockComment(parent=current)
            return current
    UnterminatedBlockComment.min_depth = 0

    def MetaCommand(self, parent=None):
        with RuleContext(self, UnlexerRule(name='MetaCommand', parent=parent)) as current:
            UnlexerRule(src='\\', parent=current)
            if self._max_depth >= 0:
                for _ in self._model.quantify(current, 0, min=0, max=inf):
                    with AlternationContext(self, [0, 0], [1, 1]) as weights0:
                        choice0 = self._model.choice(current, 0, weights0)
                        if choice0 == 0:
                            UnlexerRule(src=self._model.charset(current, 0, self._charsets[28]), parent=current)
                        elif choice0 == 1:
                            UnlexerRule(src='"', parent=current)
                            if self._max_depth >= 0:
                                for _ in self._model.quantify(current, 1, min=0, max=inf):
                                    UnlexerRule(src=self._model.charset(current, 1, self._charsets[29]), parent=current)
                            UnlexerRule(src='"', parent=current)
            if self._max_depth >= 0:
                for _ in self._model.quantify(current, 2, min=0, max=1):
                    UnlexerRule(src='"', parent=current)
                    if self._max_depth >= 0:
                        for _ in self._model.quantify(current, 3, min=0, max=inf):
                            UnlexerRule(src=self._model.charset(current, 2, self._charsets[30]), parent=current)
            return current
    MetaCommand.min_depth = 0

    def EndMetaCommand(self, parent=None):
        with RuleContext(self, UnlexerRule(name='EndMetaCommand', parent=parent)) as current:
            UnlexerRule(src='\\\\', parent=current)
            return current
    EndMetaCommand.min_depth = 0

    def ErrorCharacter(self, parent=None):
        with RuleContext(self, UnlexerRule(name='ErrorCharacter', parent=parent)) as current:
            UnlexerRule(src=self._model.charset(current, 0, self._charsets[0]), parent=current)
            return current
    ErrorCharacter.min_depth = 0

    def EscapeStringConstant(self, parent=None):
        with RuleContext(self, UnlexerRule(name='EscapeStringConstant', parent=parent)) as current:
            self.EscapeStringText(parent=current)
            UnlexerRule(src='\'', parent=current)
            return current
    EscapeStringConstant.min_depth = 1

    def UnterminatedEscapeStringConstant(self, parent=None):
        with RuleContext(self, UnlexerRule(name='UnterminatedEscapeStringConstant', parent=parent)) as current:
            self.EscapeStringText(parent=current)
            if self._max_depth >= 0:
                for _ in self._model.quantify(current, 0, min=0, max=1):
                    UnlexerRule(src='\\', parent=current)
            self.EOF(parent=current)
            return current
    UnterminatedEscapeStringConstant.min_depth = 1

    def EscapeStringText(self, parent=None):
        with RuleContext(self, UnlexerRule(name='EscapeStringText', parent=parent)) as current:
            if self._max_depth >= 0:
                for _ in self._model.quantify(current, 0, min=0, max=inf):
                    with AlternationContext(self, [0, 0, 0], [1, 1, 1]) as weights0:
                        choice0 = self._model.choice(current, 0, weights0)
                        if choice0 == 0:
                            UnlexerRule(src='\'\'', parent=current)
                        elif choice0 == 1:
                            UnlexerRule(src='\\', parent=current)
                            with AlternationContext(self, [0, 0, 0, 0], [1, 1, 1, 1]) as weights1:
                                choice1 = self._model.choice(current, 1, weights1)
                                if choice1 == 0:
                                    UnlexerRule(src='x', parent=current)
                                    UnlexerRule(src=self._model.charset(current, 0, self._charsets[31]), parent=current)
                                elif choice1 == 1:
                                    UnlexerRule(src='u', parent=current)
                                    UnlexerRule(src=self._model.charset(current, 1, self._charsets[32]), parent=current)
                                    UnlexerRule(src=self._model.charset(current, 2, self._charsets[33]), parent=current)
                                    UnlexerRule(src=self._model.charset(current, 3, self._charsets[34]), parent=current)
                                    UnlexerRule(src=self._model.charset(current, 4, self._charsets[35]), parent=current)
                                elif choice1 == 2:
                                    UnlexerRule(src='U', parent=current)
                                    UnlexerRule(src=self._model.charset(current, 5, self._charsets[36]), parent=current)
                                    UnlexerRule(src=self._model.charset(current, 6, self._charsets[37]), parent=current)
                                    UnlexerRule(src=self._model.charset(current, 7, self._charsets[38]), parent=current)
                                    UnlexerRule(src=self._model.charset(current, 8, self._charsets[39]), parent=current)
                                    UnlexerRule(src=self._model.charset(current, 9, self._charsets[40]), parent=current)
                                    UnlexerRule(src=self._model.charset(current, 10, self._charsets[41]), parent=current)
                                    UnlexerRule(src=self._model.charset(current, 11, self._charsets[42]), parent=current)
                                    UnlexerRule(src=self._model.charset(current, 12, self._charsets[43]), parent=current)
                                elif choice1 == 3:
                                    UnlexerRule(src=self._model.charset(current, 13, self._charsets[44]), parent=current)
                        elif choice0 == 2:
                            UnlexerRule(src=self._model.charset(current, 14, self._charsets[45]), parent=current)
            return current
    EscapeStringText.min_depth = 0

    def InvalidEscapeStringConstant(self, parent=None):
        with RuleContext(self, UnlexerRule(name='InvalidEscapeStringConstant', parent=parent)) as current:
            self.InvalidEscapeStringText(parent=current)
            UnlexerRule(src='\'', parent=current)
            return current
    InvalidEscapeStringConstant.min_depth = 1

    def InvalidUnterminatedEscapeStringConstant(self, parent=None):
        with RuleContext(self, UnlexerRule(name='InvalidUnterminatedEscapeStringConstant', parent=parent)) as current:
            self.InvalidEscapeStringText(parent=current)
            if self._max_depth >= 0:
                for _ in self._model.quantify(current, 0, min=0, max=1):
                    UnlexerRule(src='\\', parent=current)
            self.EOF(parent=current)
            return current
    InvalidUnterminatedEscapeStringConstant.min_depth = 1

    def InvalidEscapeStringText(self, parent=None):
        with RuleContext(self, UnlexerRule(name='InvalidEscapeStringText', parent=parent)) as current:
            if self._max_depth >= 0:
                for _ in self._model.quantify(current, 0, min=0, max=inf):
                    with AlternationContext(self, [0, 0, 0], [1, 1, 1]) as weights0:
                        choice0 = self._model.choice(current, 0, weights0)
                        if choice0 == 0:
                            UnlexerRule(src='\'\'', parent=current)
                        elif choice0 == 1:
                            UnlexerRule(src='\\', parent=current)
                            UnlexerRule(src=self._model.charset(current, 0, self._charsets[0]), parent=current)
                        elif choice0 == 2:
                            UnlexerRule(src=self._model.charset(current, 1, self._charsets[46]), parent=current)
            return current
    InvalidEscapeStringText.min_depth = 0

    def AfterEscapeStringConstantMode_Whitespace(self, parent=None):
        with RuleContext(self, UnlexerRule(name='AfterEscapeStringConstantMode_Whitespace', parent=parent)) as current:
            self.Whitespace(parent=current)
            return current
    AfterEscapeStringConstantMode_Whitespace.min_depth = 1

    def AfterEscapeStringConstantMode_Newline(self, parent=None):
        with RuleContext(self, UnlexerRule(name='AfterEscapeStringConstantMode_Newline', parent=parent)) as current:
            self.Newline(parent=current)
            return current
    AfterEscapeStringConstantMode_Newline.min_depth = 1

    def AfterEscapeStringConstantWithNewlineMode_Whitespace(self, parent=None):
        with RuleContext(self, UnlexerRule(name='AfterEscapeStringConstantWithNewlineMode_Whitespace', parent=parent)) as current:
            self.Whitespace(parent=current)
            return current
    AfterEscapeStringConstantWithNewlineMode_Whitespace.min_depth = 1

    def AfterEscapeStringConstantWithNewlineMode_Newline(self, parent=None):
        with RuleContext(self, UnlexerRule(name='AfterEscapeStringConstantWithNewlineMode_Newline', parent=parent)) as current:
            self.Newline(parent=current)
            return current
    AfterEscapeStringConstantWithNewlineMode_Newline.min_depth = 1

    def AfterEscapeStringConstantWithNewlineMode_Continued(self, parent=None):
        with RuleContext(self, UnlexerRule(name='AfterEscapeStringConstantWithNewlineMode_Continued', parent=parent)) as current:
            UnlexerRule(src='\'', parent=current)
            return current
    AfterEscapeStringConstantWithNewlineMode_Continued.min_depth = 0

    def DollarText(self, parent=None):
        with RuleContext(self, UnlexerRule(name='DollarText', parent=parent)) as current:
            with AlternationContext(self, [0, 0], [1, 1]) as weights0:
                choice0 = self._model.choice(current, 0, weights0)
                if choice0 == 0:
                    if self._max_depth >= 0:
                        for _ in self._model.quantify(current, 0, min=1, max=inf):
                            UnlexerRule(src=self._model.charset(current, 0, self._charsets[47]), parent=current)
                elif choice0 == 1:
                    UnlexerRule(src='$', parent=current)
                    if self._max_depth >= 0:
                        for _ in self._model.quantify(current, 1, min=0, max=inf):
                            UnlexerRule(src=self._model.charset(current, 1, self._charsets[48]), parent=current)
            return current
    DollarText.min_depth = 0

    def EndDollarStringConstant(self, parent=None):
        with RuleContext(self, UnlexerRule(name='EndDollarStringConstant', parent=parent)) as current:
            UnlexerRule(src='$', parent=current)
            if self._max_depth >= 2:
                for _ in self._model.quantify(current, 0, min=0, max=1):
                    self.Tag(parent=current)
            UnlexerRule(src='$', parent=current)
            return current
    EndDollarStringConstant.min_depth = 0

    def select_statement(self, parent=None):
        with RuleContext(self, UnparserRule(name='select_statement', parent=parent)) as current:
            with AlternationContext(self, [2, 0, 2, 5, 5, 5], [1, 1, 1, 1, 1, 1]) as weights0:
                choice0 = self._model.choice(current, 0, weights0)
                if choice0 == 0:
                    self.SELECT(parent=current)
                    self.column_list(parent=current)
                    self.FROM(parent=current)
                    self.from_list(parent=current)
                    if self._max_depth >= 4:
                        for _ in self._model.quantify(current, 0, min=0, max=1):
                            self.WHERE(parent=current)
                            self.c_expr(parent=current)
                elif choice0 == 1:
                    pass
                elif choice0 == 2:
                    self.SELECT(parent=current)
                    self.column_list(parent=current)
                    self.FROM(parent=current)
                    self.from_list(parent=current)
                    if self._max_depth >= 4:
                        for _ in self._model.quantify(current, 1, min=0, max=1):
                            self.WHERE(parent=current)
                            self.c_expr(parent=current)
                    if self._max_depth >= 5:
                        for _ in self._model.quantify(current, 2, min=0, max=1):
                            self.sort_clause(parent=current)
                elif choice0 == 3:
                    self.SELECT(parent=current)
                    self.column_list(parent=current)
                    self.FROM(parent=current)
                    self.from_list(parent=current)
                    self.group_clause(parent=current)
                    self.having_clause(parent=current)
                    self.sort_clause(parent=current)
                elif choice0 == 4:
                    self.SELECT(parent=current)
                    self.DISTINCT(parent=current)
                    self.column_list(parent=current)
                    self.FROM(parent=current)
                    self.from_list(parent=current)
                    self.sort_clause(parent=current)
                elif choice0 == 5:
                    self.SELECT(parent=current)
                    self.column_list(parent=current)
                    self.FROM(parent=current)
                    self.from_list(parent=current)
                    self.group_clause(parent=current)
                    self.having_clause(parent=current)
                    self.SELECT(parent=current)
                    self.column_list(parent=current)
                    self.FROM(parent=current)
                    self.from_list(parent=current)
                    self.WHERE(parent=current)
                    self.c_expr(parent=current)
                    self.sort_clause(parent=current)
            return current
    select_statement.min_depth = 0

    def from_list(self, parent=None):
        with RuleContext(self, UnparserRule(name='from_list', parent=parent)) as current:
            with AlternationContext(self, [0, 3], [1, 1]) as weights0:
                choice0 = self._model.choice(current, 0, weights0)
                if choice0 == 0:
                    pass
                elif choice0 == 1:
                    self.table_ref(parent=current)
                    if self._max_depth >= 3:
                        for _ in self._model.quantify(current, 0, min=0, max=inf):
                            self.COMMA(parent=current)
                            self.table_ref(parent=current)
            return current
    from_list.min_depth = 0

    def table_ref(self, parent=None):
        with RuleContext(self, UnparserRule(name='table_ref', parent=parent)) as current:
            self.Identifier(parent=current)
            return current
    table_ref.min_depth = 2

    def c_expr(self, parent=None):
        with RuleContext(self, UnparserRule(name='c_expr', parent=parent)) as current:
            with AlternationContext(self, [3, 3, 4], [1, 1, 1]) as weights0:
                choice0 = self._model.choice(current, 0, weights0)
                if choice0 == 0:
                    self.columnref(parent=current)
                elif choice0 == 1:
                    self.columnref(parent=current)
                    self.binary_op(parent=current)
                    self.columnref(parent=current)
                    if self._max_depth >= 4:
                        for _ in self._model.quantify(current, 0, min=0, max=inf):
                            self.binary_op(parent=current)
                            self.c_expr(parent=current)
                elif choice0 == 2:
                    self.unary_op(parent=current)
                    self.c_expr(parent=current)
            return current
    c_expr.min_depth = 3

    def columnref(self, parent=None):
        with RuleContext(self, UnparserRule(name='columnref', parent=parent)) as current:
            with AlternationContext(self, [2, 3, 2, 2, 3], [1, 1, 1, 1, 1]) as weights0:
                choice0 = self._model.choice(current, 0, weights0)
                if choice0 == 0:
                    self.Identifier(parent=current)
                elif choice0 == 1:
                    self.table_ref(parent=current)
                    self.DOT(parent=current)
                    with AlternationContext(self, [2, 1], [1, 1]) as weights1:
                        choice1 = self._model.choice(current, 1, weights1)
                        [self.Identifier, self.STAR][choice1](parent=current)
                elif choice0 == 2:
                    self.Integral(parent=current)
                elif choice0 == 3:
                    self.StringConstant(parent=current)
                elif choice0 == 4:
                    self.columnref(parent=current)
                    self.AS(parent=current)
                    self.collabel(parent=current)
            return current
    columnref.min_depth = 2

    def group_clause(self, parent=None):
        with RuleContext(self, UnparserRule(name='group_clause', parent=parent)) as current:
            with AlternationContext(self, [4, 0], [1, 1]) as weights0:
                choice0 = self._model.choice(current, 0, weights0)
                if choice0 == 0:
                    self.GROUP_P(parent=current)
                    self.BY(parent=current)
                    self.group_by_list(parent=current)
                elif choice0 == 1:
                    pass
            return current
    group_clause.min_depth = 0

    def group_by_list(self, parent=None):
        with RuleContext(self, UnparserRule(name='group_by_list', parent=parent)) as current:
            self.columnref(parent=current)
            if self._max_depth >= 3:
                for _ in self._model.quantify(current, 0, min=0, max=inf):
                    self.COMMA(parent=current)
                    self.columnref(parent=current)
            return current
    group_by_list.min_depth = 3

    def having_clause(self, parent=None):
        with RuleContext(self, UnparserRule(name='having_clause', parent=parent)) as current:
            self.HAVING(parent=current)
            self.c_expr(parent=current)
            return current
    having_clause.min_depth = 4

    def sort_clause(self, parent=None):
        with RuleContext(self, UnparserRule(name='sort_clause', parent=parent)) as current:
            self.ORDER(parent=current)
            self.BY(parent=current)
            self.sortby_list(parent=current)
            return current
    sort_clause.min_depth = 4

    def column_list(self, parent=None):
        with RuleContext(self, UnparserRule(name='column_list', parent=parent)) as current:
            with AlternationContext(self, [1, 3], [1, 1]) as weights0:
                choice0 = self._model.choice(current, 0, weights0)
                if choice0 == 0:
                    self.STAR(parent=current)
                elif choice0 == 1:
                    self.columnref(parent=current)
                    if self._max_depth >= 3:
                        for _ in self._model.quantify(current, 0, min=0, max=inf):
                            self.COMMA(parent=current)
                            self.columnref(parent=current)
            return current
    column_list.min_depth = 1

    def sortby_list(self, parent=None):
        with RuleContext(self, UnparserRule(name='sortby_list', parent=parent)) as current:
            self.sortby(parent=current)
            if self._max_depth >= 3:
                for _ in self._model.quantify(current, 0, min=0, max=inf):
                    self.COMMA(parent=current)
                    self.sortby(parent=current)
            return current
    sortby_list.min_depth = 3

    def sortby(self, parent=None):
        with RuleContext(self, UnparserRule(name='sortby', parent=parent)) as current:
            with AlternationContext(self, [3, 2, 2, 2, 2], [1, 1, 1, 1, 1]) as weights0:
                choice0 = self._model.choice(current, 0, weights0)
                if choice0 == 0:
                    self.columnref(parent=current)
                elif choice0 == 1:
                    self.Identifier(parent=current)
                    self.USING(parent=current)
                    self.GT(parent=current)
                elif choice0 == 2:
                    self.Identifier(parent=current)
                    self.USING(parent=current)
                    self.LT(parent=current)
                elif choice0 == 3:
                    self.Identifier(parent=current)
                    self.ASC(parent=current)
                elif choice0 == 4:
                    self.Identifier(parent=current)
                    self.DESC(parent=current)
            return current
    sortby.min_depth = 2

    def collabel(self, parent=None):
        with RuleContext(self, UnparserRule(name='collabel', parent=parent)) as current:
            self.Identifier(parent=current)
            return current
    collabel.min_depth = 2

    def binary_op(self, parent=None):
        with RuleContext(self, UnparserRule(name='binary_op', parent=parent)) as current:
            with AlternationContext(self, [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]) as weights0:
                choice0 = self._model.choice(current, 0, weights0)
                [self.AND, self.OR, self.LT, self.GT, self.EQUAL][choice0](parent=current)
            return current
    binary_op.min_depth = 1

    def unary_op(self, parent=None):
        with RuleContext(self, UnparserRule(name='unary_op', parent=parent)) as current:
            self.NOT(parent=current)
            return current
    unary_op.min_depth = 1

    _default_rule = select_statement

    _charsets = {
        0: list(itertools.chain.from_iterable([range(32, 127)])),
        1: list(itertools.chain.from_iterable([range(48, 58)])),
        2: list(itertools.chain.from_iterable([range(43, 44), range(45, 46)])),
        3: list(itertools.chain.from_iterable([range(33, 34), range(35, 36), range(37, 38), range(38, 39), range(42, 43), range(60, 61), range(61, 62), range(62, 63), range(63, 64), range(64, 65), range(94, 95), range(96, 97), range(124, 125), range(126, 127)])),
        4: list(itertools.chain.from_iterable([range(42, 43), range(43, 44), range(60, 61), range(61, 62), range(62, 63)])),
        5: list(itertools.chain.from_iterable([range(33, 34), range(35, 36), range(37, 38), range(38, 39), range(63, 64), range(64, 65), range(94, 95), range(96, 97), range(124, 125), range(126, 127)])),
        6: list(itertools.chain.from_iterable([range(65, 91), range(95, 96), range(97, 123)])),
        7: list(itertools.chain.from_iterable([range(48, 58)])),
        8: list(itertools.chain.from_iterable([range(32, 34), range(35, 127)])),
        9: list(itertools.chain.from_iterable([range(32, 34), range(35, 127)])),
        10: list(itertools.chain.from_iterable([range(32, 39), range(40, 127)])),
        11: list(itertools.chain.from_iterable([range(48, 49), range(49, 50)])),
        12: list(itertools.chain.from_iterable([range(48, 58), range(65, 71)])),
        13: list(itertools.chain.from_iterable([range(43, 44), range(45, 46)])),
        14: list(itertools.chain.from_iterable([range(43, 44), range(45, 46)])),
        15: list(itertools.chain.from_iterable([range(43, 44), range(45, 46)])),
        16: list(itertools.chain.from_iterable([range(48, 58)])),
        17: list(itertools.chain.from_iterable([range(65, 91), range(95, 96)])),
        18: list(itertools.chain.from_iterable([range(36, 37), range(48, 58), range(65, 91), range(95, 96)])),
        19: list(itertools.chain.from_iterable([range(32, 34), range(35, 92), range(93, 127)])),
        20: list(itertools.chain.from_iterable([range(9, 10), range(32, 33)])),
        21: list(itertools.chain.from_iterable([range(32, 127)])),
        22: list(itertools.chain.from_iterable([range(32, 42), range(43, 47), range(48, 127)])),
        23: list(itertools.chain.from_iterable([range(32, 42), range(43, 47), range(48, 127)])),
        24: list(itertools.chain.from_iterable([range(32, 42), range(43, 47), range(48, 127)])),
        25: list(itertools.chain.from_iterable([range(32, 42), range(43, 47), range(48, 127)])),
        26: list(itertools.chain.from_iterable([range(32, 42), range(43, 47), range(48, 127)])),
        27: list(itertools.chain.from_iterable([range(32, 42), range(43, 47), range(48, 127)])),
        28: list(itertools.chain.from_iterable([range(32, 34), range(35, 92), range(93, 127)])),
        29: list(itertools.chain.from_iterable([range(32, 34), range(35, 127)])),
        30: list(itertools.chain.from_iterable([range(32, 34), range(35, 127)])),
        31: list(itertools.chain.from_iterable([range(48, 58), range(65, 71), range(97, 103)])),
        32: list(itertools.chain.from_iterable([range(48, 58), range(65, 71), range(97, 103)])),
        33: list(itertools.chain.from_iterable([range(48, 58), range(65, 71), range(97, 103)])),
        34: list(itertools.chain.from_iterable([range(48, 58), range(65, 71), range(97, 103)])),
        35: list(itertools.chain.from_iterable([range(48, 58), range(65, 71), range(97, 103)])),
        36: list(itertools.chain.from_iterable([range(48, 58), range(65, 71), range(97, 103)])),
        37: list(itertools.chain.from_iterable([range(48, 58), range(65, 71), range(97, 103)])),
        38: list(itertools.chain.from_iterable([range(48, 58), range(65, 71), range(97, 103)])),
        39: list(itertools.chain.from_iterable([range(48, 58), range(65, 71), range(97, 103)])),
        40: list(itertools.chain.from_iterable([range(48, 58), range(65, 71), range(97, 103)])),
        41: list(itertools.chain.from_iterable([range(48, 58), range(65, 71), range(97, 103)])),
        42: list(itertools.chain.from_iterable([range(48, 58), range(65, 71), range(97, 103)])),
        43: list(itertools.chain.from_iterable([range(48, 58), range(65, 71), range(97, 103)])),
        44: list(itertools.chain.from_iterable([range(32, 85), range(86, 117), range(118, 120), range(121, 127)])),
        45: list(itertools.chain.from_iterable([range(32, 39), range(40, 92), range(93, 127)])),
        46: list(itertools.chain.from_iterable([range(32, 39), range(40, 92), range(93, 127)])),
        47: list(itertools.chain.from_iterable([range(32, 36), range(37, 127)])),
        48: list(itertools.chain.from_iterable([range(32, 36), range(37, 127)])),
    }
